<html>
<head>
<title>Data processing </title>
<LINK REL=stylesheet HREF="../jdoc.css" TYPE="text/css">
</head><body><!--top jump start--><a href="gui2.htm">&gt&gt;</a>&nbsp;
<a href="gui.htm">&lt&lt;</a>&nbsp;
<a href="../index/a.htm">Ndx</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../user/win_driver_cmd_ref_overview.htm">wd</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Primer<hr><!--top jump end-->


 

<TR valign="baseline"><TD><H1>Data processing</h1><TR><TD>

<P>Applications typically have a GUI part and a data processing (DP) part. The DP part is the actual calculations and data manipulation. A good application implementation will be modular and this implies a clear distinction between the GUI and the DP parts.</P>

<P>In this section you will develop the DP part of a simple application. In the next section you will develop the GUI part.</P>

<P>The DP part of the application is specified as follows:
</P>
<BLOCKQUOTE><P>The input is the name of a text file. The output is a string that displays as a table that contains: the file name, a count of lines, a count of characters, and a row for each distinct character in the file and a count of how many times it appears in the file. The rows of distinct characters should be sorted by their counts.</P></BLOCKQUOTE>

<P>You'll be working with files, so load the file utilities.
</P>
<PRE>   load 'files'
</PRE>
<P>Create a simple text file to use as test data.
</P>
<PRE>   fn =. 'user\text.txt'
   data =. 'abc' , LF, 'bc' , LF, 'b' , LF
   data fwrite fn
9
   fread fn
abc
bc
b</PRE>

<P>You need to define a verb report that takes a filename as an argument and returns the specified result. You'll build pieces of the definition in the ijx window and then put them all together into the definition in a script.</P>

<P>The input is a filename and in the report verb it will have the name <TT>y.</TT> , so start by working with <TT>y.</TT> in the ijx window.</P>

<PRE>   y. =. 'user\text.txt'
</PRE>
<P>Read the file.
</P>
<PRE>   d =. fread y.
</PRE>
<P>The report will have two columns. The first column will be the labels 'File:', 'Lines:', 'Chars:', and each distinct character in the file. The second column will be the value for that row. Since the data is a mixture of text and numbers it makes sense to build the result as boxed data.</P>

<P>Create a noun with the fixed labels.
</P>
<PRE>   r =. 'File:' ; 'Lines:' ; 'Chars:'
   r
+-------------------+
¦File:¦Lines:¦Chars:¦
+-------------------+</PRE>

<P>The values for those labels are calculated as follows:
</P>
<PRE>   y. ; (+/ LF = d) ; #d
+-----------------+
¦user\text.txt¦3¦9¦
+-----------------+
</PRE>
<P>The dyad <TT>,.</TT> (stitch) can connect these two lists into a table.
</P>
<PRE>   r =. r ,.  y. ; (+/ LF = d) ; #d
   r
+--------------------+
¦File: ¦user\text.txt¦
+------+-------------¦
¦Lines:¦3            ¦
+------+-------------¦
¦Chars:¦9            ¦
+--------------------+
</PRE>
<P>The next thing is to add the rows with the characters and their frequency counts. The letter is the label and the count is the value, so it just adds more items to <TT>r</TT>. Let's postpone that part of the problem, and work instead on converting the boxed table to the string result required by the spec. Use a comment to mark the bit we are skipping over for now.</P>

<PRE>   NB. need to add frequency rows to r here
</PRE> 
<P>The numbers in the second column need to be converted to characters. The easiest way to do this is to convert the contents of each box to characters. The characters are already characters and are not affected, but any numbers will be converted.</P>

<PRE>   r  =. ":each r
   r
+--------------------+
¦File: ¦user\text.txt¦
+------+-------------¦
¦Lines:¦3            ¦
+------+-------------¦
¦Chars:¦9            ¦
+--------------------+
</PRE>
<P>The display of <TT>r</TT> with all characters looks the same, but each box now contains characters.</P>

<P>The next step is interesting and the details are left for you to puzzle out. It adds a TAB  after each label and an LF after each value. In the final result the TAB separates the label from its value, and the LF causes a new line for the next label. The boxed display shows the TAB and LF as blanks, but they really are in there.</P>

<PRE>   r =. r ,each"1 1 TAB;LF
   r
+----------------------+
¦File:  ¦user\text.txt ¦
+-------+--------------¦
¦Lines: ¦3             ¦
+-------+--------------¦
¦Chars: ¦9             ¦
+----------------------+
</PRE>
<P>The monad <TT>;</TT> (raze) opens all the boxes and assembles a string result.
</P>
<PRE>   ; r
File: 	user\text.txt
Lines:	3
Chars:	9
</PRE>
<P>You are ready to define your verb report. Create a new script and save it as user\textdp.ijs. Putting together the ijx experiments, add the following definition for report to the script.</P>

 
<PRE>report =: 3 : 0
d =. fread y.
r =. 'File:' ; 'Lines:' ; 'Chars:'
r =. r ,. y. ; (+/ LF = d) ; #d
NB. need to add frequency rows to r here
r =. ":each r
r =. r ,each"1 1 TAB;LF
; r
)</PRE>

<P>Run the script and test report.
</P>
<PRE>   report fn
File: 	user\text.txt
Lines:	3
Chars:	9</PRE>

<P>Now calculate the frequency rows. You need a verb <TT>freq </TT>that returns a table of boxes where the first column is the distinct characters and the second column is the count of times they are in the file. The argument to <TT>freq </TT>is the file data and inside <TT>freq </TT>it will have the name <TT>y.</TT> , so let's start with <TT>y.</TT> defined as the file data.</P>

<PRE>   y. =. fread fn
</PRE>
<P>The data can include TAB, CR, and LF characters and they should be removed. The dyad <TT>-.</TT> (less) can remove these unwanted characters.</P>

<PRE>   d =. y. -. TAB,CR,LF
   d
abcbcb
</PRE>
<P>The utility <TT>nubcount</TT>, defined by script misc.ijs, returns a table of boxes with a first column containing the distinct items in its argument and the second column containing the counts.</P>

<PRE>   load 'misc'
   nc =. nubcount d
   nc
+---+
¦a¦1¦
+-+-¦
¦b¦3¦
+-+-¦
¦c¦2¦
+---+
</PRE>
<P>To sort the items by the counts you need to get the counts into a list.
</P>
<PRE>   > 1 {"1 nc 
1 3 2
</PRE>
<P>The dyad <TT>\:</TT> (sort down) sorts the items of its left argument based its right argument.</P>

<PRE>   nc \: > 1 {"1 nc
+---+
¦b¦3¦
+-+-¦
¦c¦2¦
+-+-¦
¦a¦1¦
+---+</PRE>

<P>Put this all together and add the following definition to your script.
</P>
<PRE>freq =: 3 : 0
d =. y. -. TAB,CR,LF
nc =. nubcount d
nc \: > 1 {"1 nc
)</PRE>

<P>Run the script and test <TT>freq</TT>.
</P>
<PRE>   freq fread fn
+---+
¦b¦3¦
+-+-¦
¦c¦2¦
+-+-¦
¦a¦1¦
+---+</PRE>

<P>You can now use <TT>freq </TT>in your <TT>report </TT>verb. Modify the <TT>NB.</TT> comment line in report to be:</P>

<PRE>r =. r , freq d
</PRE>
<P>Run the script and test report.
</P>
 
<PRE>   report fn
File:	user\text.txt
Lines:	3
Chars:	9
b	3
c	2
a	1
</PRE>
<P>Try it on other text files.
</P>
<P>You have finished the data processing part.
</P>

</TD>
  </tr>
<TR><TD>
<!--bottom jump start--><hr><a href="gui2.htm">&gt&gt;</a>&nbsp;
<a href="gui.htm">&lt&lt;</a>&nbsp;
<a href="../index/a.htm">Ndx</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../user/win_driver_cmd_ref_overview.htm">wd</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Primer<!--bottom jump end--></td></tr></table></body>
</html>
