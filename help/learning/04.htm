<HTML>
<HEAD>
<TITLE>Ch 4: Scripts</TITLE>

<STYLE TYPE="text/css">
<!--
TT  {font-size: 11pt; COLOR: BLUE}
PRE {font-size: 11pt; COLOR: BLUE}
-->
</STYLE>

</HEAD>

<BODY BGCOLOR=WHITE>

<table border="0" cellpadding="5" cellspacing="0"  width="100%">
 <tr> <td valign="top" width="17%"> <p> </td>
      <td valign="top" width="83%"> 
<H1>Chapter 4: Scripts</H1>
<p>
What is called a "script" is a sequence of lines of J  
where the whole sequence can be replayed on demand to perform 
a computation.    
The themes of this chapter are scripts, functions defined by scripts, and scripts in files. 
<H2>4.1  Text</H2>
<p>
Here is an assignment to the variable <TT>txt</TT>: 
<PRE>
   txt =: 0 : 0
What is called a "script" is
a sequence of lines of J.
)
</PRE>
<p>
The expression <TT>0 : 0</TT> means "as follows", that is, <TT>0 : 0</TT> is a verb 
which takes as its argument, and delivers as its result, whatever lines 
are typed following it, down to the line beginning with the solo right-parenthesis. 
<p>
The value of <TT>txt</TT> is these two lines, in a single character string. 
The string contains line-feed (<TT>LF</TT>) characters,  
which cause <TT>txt</TT> to be displayed as several lines. 
<TT>txt</TT> has a certain length, it is rank 1, that is, just a list, and it contains 
2 line-feed characters. 
<PRE>
   txt
What is called a "script" is
a sequence of lines of J.

</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>$ txt</TT></TD> 
<TD><TT># $ txt</TT></TD> 
<TD><TT>+/ txt = LF</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>55</TD> 
<TD><PRE>1</TD> 
<TD><PRE>2</TD> 
</PRE></TABLE> 
<p>
Let us say that <TT>txt</TT> is a "text" variable, that is, 
a character string with zero or more line-feed characters. 
<H2>4.2  Scripts for Procedures</H2>
<p>
Here we look at computations described as step-by-step procedures to be followed. 
For a very simple example, the Fahrenheit-to-Celsius conversion can be described in  
two steps. 
Given some temperature <TT>T</TT> say in degrees Fahrenheit: 
<PRE>
   T =: 212
</PRE>
<p>
then the first step is subtracting 32. Call the result <TT>t</TT>, say. 
<PRE>
   t =: T - 32
</PRE>
<p>
The second step is multiplying <TT>t</TT> by <TT>5%9</TT> to give the temperature in degrees Celsius. 
<PRE>
   t * 5 % 9
100
</PRE>
<p>
Suppose we intend to perform this computation several times with different values of <TT>T</TT>.  
We could record this two-line procedure  
as a script which can be replayed on demand.  The script 
consists of the lines of J stored in a text variable, thus: 
<PRE>
   script =: 0 : 0
t =: T - 32
t * 5 % 9
)
</PRE>
<p>
Scripts like this can be executed with the built-in J verb <TT>0 !: 111</TT> 
which we can call, say, <TT>do</TT>. 
<PRE>
   do =: 0 !: 111
   
   do  script
</PRE>
<p>
We should now see the lines on the screen just as though they had been typed in from 
the keyboard: 
<p><PRE>
   t =: T - 32
   t * 5 % 9
212
</PRE> 
<p>
We can run the script again with a different value for <TT>T</TT> 
<PRE>
   T =: 32
   do script
</PRE>
<p> and we see: <p>
<PRE>
   t =: T - 32 
   t * 5 % 9 
0
</PRE>
 
<H2>4.3  Explicitly-Defined Functions</H2>
<p>
Functions can be defined by scripts. 
Here is an example, the Fahrenheit-to-Celsius conversion as a verb. 
<PRE>
   Celsius =: 3 : 0
t =: y. - 32
t * 5 % 9
)
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>Celsius 32 212</TT></TD> 
<TD><TT>1 + Celsius 32 212</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>0 100</TD> 
<TD><PRE>1 101</TD> 
</PRE></TABLE> 
<p>
Let us look at this definition more closely. 
<H3>4.3.1  Heading</H3>
<p>
The function is introduced with the expression <TT>3 : 0</TT> which means: "a verb as follows". 
(By contrast, recall that <TT>0 : 0</TT> means "a character string as follows"). 
<p>
The colon in <TT>3 : 0</TT> is a conjunction. Its left argument <TT>(3)</TT> means "verb". Its right argument <TT>(0)</TT> 
means "lines following". For more details, see Chapter 11.  A function introduced in this way 
is called "explicitly-defined", or just "explicit". 
<H3>4.3.2  Meaning</H3>
<p>
The expression <TT>(Celsius 32 212)</TT> applies the verb <TT>Celsius</TT> 
to the argument <TT>32 212</TT>,  
by carrying out a computation which can be described, or modelled, like this: 
<PRE>
   y. =: 32 212
   t  =: y. - 32
   t * 5 % 9
0 100
</PRE>
<p>
Notice that, after the first line,  
the computation proceeds according to the script. 
<H3>4.3.3  Argument Variable(s)</H3>
<p>
The value of the argument <TT>(32 212)</TT> is supplied to the script as a variable named <TT>y.</TT>.  
This "argument variable" is always named <TT>y.</TT> in a monadic function. (In a dyadic function, as we shall see below, 
the right argument is always named <TT>y.</TT> and the left is <TT>x.</TT>) 
<H3>4.3.4  Local Variables</H3>
<p>
In our definition of <TT>Celsius</TT> there is a variable <TT>t</TT> to which a value is assigned. 
This variable is used only during the execution of <TT>Celsius</TT>.  
It would be unfortunate if this assignment to <TT>t</TT> interfered with the value of any other 
variable also called <TT>t</TT> which we happened to be using at the time.   
<p>
To avoid this interference, we should make <TT>t</TT> a strictly private affair. To do this, 
we use a special form of assignment, called a local assignment, with the symbol <TT>=.</TT> (equal dot). 
Our revised definition becomes:  
<PRE>
   CELSIUS =: 3 : 0
t =. y. - 32
t * 5 % 9
)
</PRE>
<p>
We can demonstrate that in <TT>CELSIUS</TT> the variable <TT>t</TT> is local,  
while in <TT>Celsius</TT> variable <TT>t</TT> 
interferes with any non-local (or "global") variable also called <TT>t</TT>. 
<PRE>
   t =: 'hello'
   CELSIUS 32 212
0 100
   t
hello
   Celsius 32 212
0 100
   t
0 180
</PRE>
<p>
The argument-variable <TT>y.</TT> is also a local variable. Hence the evaluation of  
<TT>(CELSIUS 32 212)</TT> is more accurately modelled by the computation: 
<PRE>
   y. =. 32 212
   t  =. y. - 32
   t * 5 % 9
0 100
</PRE>
<H3>4.3.5  Dyadic Verbs</H3>
<p>
<TT>CELSIUS</TT> is a monadic verb, introduced with <TT>3 : 0</TT> and defined in terms  
of the single argument <TT>y.</TT>.  By contrast, a dyadic verb  
is introduced with <TT>4 : 0</TT>. The left and right arguments  
are always named <TT>x.</TT> and <TT>y.</TT> respectively. 
Here is an example. The "positive difference" of two numbers is the larger minus the smaller. 
<PRE>
   posdiff =: 4 : 0
larger  =. x. >. y.
smaller =. x. &lt;. y.
larger - smaller 
)
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>3 posdiff 4</TT></TD> 
<TD><TT>4 posdiff 3</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1</TD> 
<TD><PRE>1</TD> 
</PRE></TABLE> 
<H3>4.3.6  One-Liners</H3>
<p>
A one-line script can be written as a character string, and given as the right argument 
of the colon conjunction.  
<PRE>
   PosDiff =: 4 : '(x. >. y.) - (x. &lt;. y.)'
   4 PosDiff 3
1
</PRE>
<H3>4.3.7  Flow of Control</H3>
<p>
In the examples we have seen so far of functions defined by scripts,  
execution begins with the first line, proceeds to the next, and so on to the last.  
This straight-through path is not the only path possible.  
The path can be controlled by conditions which can be  
tested in the course of the computation. 
<p>
Here is a simple example, a variation of <TT>PosDiff</TT> where the course of the computation is 
guided by the presence of what are called the "control words" <TT>if.</TT> <TT>do.</TT> <TT>else.</TT> <TT>end.</TT> . 
<PRE>
   POSDIFF =: 4 : 0
if.   x. > y.
do.   x. - y.
else. y. - x.
end.
)
   3 POSDIFF 4
1
</PRE>
<p>
See Chapter 11 for more on control words. 
<H2>4.4  Tacit and Explicit Compared</H2>
<p>
We have now seen two different styles of function definition.   
The explicit style, introduced in this chapter, is so called because it 
explicitly mentions variables standing for arguments. Thus in <TT>POSDIFF</TT> above, 
the variable <TT>y.</TT> is an explicit mention of an argument. 
<p>
By contrast, the style we looked at in the previous chapter is called "tacit", because there is no 
mention of variables standing for arguments. For example, recall the function <TT>round</TT> 
from Chapter 3, with the definition: 
<PRE>
   round =: &lt;. @: (+&0.5)
   
   round  26.25 26.75
26 27
</PRE>
<p>
Many functions defined in the tacit style 
can also be defined explicitly, and vice versa.   
Which style is preferable depends on what seems most natural, 
 in 
the light of however we conceive the function to be defined. The choice lies between 
breaking down the problem into, on the one hand, a scripted sequence of steps or on the other hand  
into a collection of smaller functions. 
<p>
The tacit style allows a compact definition.  For this reason, tacit functions  
 lend themselves well to systematic analysis and transformation. 
Indeed, the J system can, for a broad class of tacit functions,  
automatically compute such transformations as inverses 
and derivatives. (See Chapter 23). 
<H2>4.5  Functions as Values</H2>
<p>
A function is a value, and a value can be displayed by entering an expression.  An expression can be  
as simple as a name.  Here are some values of tacit and explicit functions: 
<PRE>
   - & 32
+-+-+--+
|-|&|32|
+-+-+--+
   
   round
+--+--+---------+
|&lt;.|@:|+-+-+---+|
|  |  ||+|&|0.5||
|  |  |+-+-+---+|
+--+--+---------+
   
   CELSIUS
+-+-+------------+
|3|:|t =. y. - 32|
| | |t * 5 % 9   |
+-+-+------------+
</PRE>
<p>
The value of each function is here represented as a boxed structure. Other representations are  
available: see Chapter 32.  
<H2>4.6  Script Files</H2>
<p>
We have seen scripts (lines of J) used for definitions of single variables: text variables 
or functions.  By contrast, a file holding lines of J as text can store many definitions. 
Such a file is called a script file, and its usefulness is that  
all its definitions together can be executed by reading the file. 
<p>
Here is an example. Create a file 
on your computer called, say, <TT>C:\MYSCRIPT</TT>.  
Use a text-editor of your choice to create the file. The file should contain 
2 lines of text like the following: 
<p>
<PRE>
         squareroot =: %:
         z =: 1 , (2+2) , (4+5)
</PRE>

<p>
Having created this 2-line script file,  
we can execute it by typing at the keyboard: 
<PRE>
   (0 !: 1) &lt; 'C:\MYSCRIPT'
</PRE>
<p>
and we should now see the lines on the screen just as though they had been typed from the keyboard. 
<p><PRE>
   squareroot =: %:
   z =: 1 , (2+2), (4+5)
</PRE>
<p>
We can now compute with the definitions we have just loaded in from the file: 
<PRE>
   z
1 4 9
   squareroot z
1 2 3
</PRE>
<p>
The activities in a J session will be typically a mixture of editing script files, 
loading or reloading the definitions from script files, and initiating computations 
at the keyboard.  What carries over from one session to another is only the script files. 
The state, or memory,  of the J system itself  
disappears at the end of the session, along with all the definitions entered during the session. 
Hence it is a good idea to ensure, before ending a J session, that any script file is up to date, that is, 
it contains all the definitions you wish to preserve. 
<p>
The J system will automatically load a designated script file at the beginning of the session.   
By default, this script file is called <TT>profile.js</TT> (or <TT>profile.ijs</TT> for later versions of J.)  
It can be edited, and is a good place to record any definitions of your own  
which you find generally useful. 
<p>
We have now come to the end of Chapter 4 and of Part 1. 
The following chapters will treat, in more 
depth and detail, the themes we have 
touched upon in Part 1. 
  </tr> </table>

<HR> 

<p ALIGN=LEFT>
<A HREF="05.htm"> NEXT </A> <BR>
<A HREF="book.htm#toc"> Table of Contents </A>
</p> 

<HR>
<p><FONT SIZE=-2>Copyright &copy; Roger Stokes 1999. 
This material may be freely reproduced,
provided that this copyright notice and provision is also reproduced.
</p>
 
<p ALIGN=CENTER> last updated 10 September 1999</p>
</BODY>
</HTML>
