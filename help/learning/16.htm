<HTML>
<HEAD>
<TITLE>Ch 16: Rearrangements</TITLE>

<STYLE TYPE="text/css">
<!--
TT  {font-size: 11pt; COLOR: BLUE}
PRE {font-size: 11pt; COLOR: BLUE}
-->
</STYLE>

</HEAD>

<BODY BGCOLOR=WHITE>

<table border="0" cellpadding="5" cellspacing="0"  width="100%">
 <tr> <td valign="top" width="17%"> <p> </td>
      <td valign="top" width="83%"> 
<H1>Chapter 16: Rearrangements</H1>
<p>
This chapter covers rearranging the items of  
arrays: permuting, sorting,  
transposing, reversing, rotating and shifting. 
<H2>16.1  Permutations</H2>
<p>
A permutation of a vector is another vector which has all the items of the first but not 
necessarily in the same order.  
For example, <TT>z</TT> is a permutation of <TT>y</TT> where: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y =: 'abcde' </TT></TD> 
<TD><TT>z =: 4 2 3 1 0 { y </TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde</TD> 
<TD><PRE>ecdba</TD> 
</PRE></TABLE> 
<p>
The index vector <TT>4 2 3 1 0</TT> is itself a permutation of the indices <TT>0 1 2 3 4</TT>, that is, <TT>i. 5</TT>, and  
hence is said to be a permutation vector of order 5. 
<p>
Notice the effect of this permutation: the first and last items are interchanged and the middle three rotate 
position amongst themselves. Hence this permutation can be described as a combination of cycling two items 
and cycling three items. After 6 (= 2 * 3) applications of this permutation we return to the original vector.  
<PRE>
   p =: 4 2 3 1 0 & {
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y </TT></TD> 
<TD><TT>p y</TT></TD> 
<TD><TT>p p y</TT></TD> 
<TD><TT>p p p p p p y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde</TD> 
<TD><PRE>ecdba</TD> 
<TD><PRE>adbce</TD> 
<TD><PRE>abcde</TD> 
</PRE></TABLE> 
<p>
The permutation <TT>4 2 3 1 0</TT> can be represented as a cycle of 2 and a cycle of 3.  
The verb to compute this cyclic representation is monadic <TT>C.</TT> . 
<PRE>
   C. 4 2 3 1 0
+-----+---+
|3 1 2|4 0|
+-----+---+
</PRE>
<p>
Thus we have two representations of a  
permutation: <TT>(4 2 3 1 0)</TT> is called a direct representation  
and <TT>(3 1 2 ; 4 0)</TT> 
is called a cyclic representation.  
Monadic <TT>C.</TT> can accept either form and will produce the other form: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>C. 4 2 3 1 0 </TT></TD> 
<TD><TT>C. 3 1 2 ; 4 0</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+-----+---+ 
|3 1 2|4 0| 
+-----+---+</TD> 
<TD><PRE>4 2 3 1 0</TD> 
</PRE></TABLE> 
<p>
The dyadic verb <TT>C.</TT> can accept either form as its left argument, and permutes its 
right argument. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y </TT></TD> 
<TD><TT>4 2 3 1 0 C. y</TT></TD> 
<TD><TT>(3 1 2 ; 4 0) C. y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde</TD> 
<TD><PRE>ecdba</TD> 
<TD><PRE>ecdba</TD> 
</PRE></TABLE> 
<H3>16.1.1  Abbreviated Permutations</H3>
<p>
Dyadic <TT>C.</TT> can accept a left argument which is an abbreviation for a (direct) permutation vector. 
The effect is to move specified items to the tail, one at a time, in the order given. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y </TT></TD> 
<TD><TT>2 C. y </TT></TD> 
<TD><TT>2 3 C. y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde</TD> 
<TD><PRE>abdec</TD> 
<TD><PRE>abecd</TD> 
</PRE></TABLE> 
<p>
With the abbreviated form, successive items are taken from the original vector: notice how the following 
 two examples give different results. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y </TT></TD> 
<TD><TT>2 3 C. y</TT></TD> 
<TD><TT>3 C. (2 C. y)</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde</TD> 
<TD><PRE>abecd</TD> 
<TD><PRE>abdce</TD> 
</PRE></TABLE> 
<p>
If the left argument is boxed, then each box in turn is applied as a cycle: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y </TT></TD> 
<TD><TT>(&lt;3 1 2) C. y</TT></TD> 
<TD><TT>(3 1 2 ; 4 0) C. y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde</TD> 
<TD><PRE>acdbe</TD> 
<TD><PRE>ecdba</TD> 
</PRE></TABLE> 
<p>
If <TT>a</TT> is an abbreviated permutation vector (of order <TT>n</TT>) then the full-length equivalent of <TT>a</TT>  
is given by <TT>(a U n)</TT> where <TT>U</TT> is the utility function:  
<PRE>
   U =: 4 : 0
z =: y. | x.
((i. y.) -. z), z
)
</PRE>
<p>
For example, suppose the abbreviated  
permutation <TT>a</TT> is <TT>(1 3)</TT> 
then we see: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y </TT></TD> 
<TD><TT>a =: 1 3</TT></TD> 
<TD><TT>a C. y</TT></TD> 
<TD><TT>f =: a U (#y)</TT></TD> 
<TD><TT>f C. y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde</TD> 
<TD><PRE>1 3</TD> 
<TD><PRE>acebd</TD> 
<TD><PRE>0 2 4 1 3</TD> 
<TD><PRE>acebd</TD> 
</PRE></TABLE> 
<H3>16.1.2  Inverse Permutation</H3>
<p>
If <TT>f</TT> is a full-length permutation vector, then the inverse permutation is given by 
<TT>(/: f)</TT>. (We will look at the verb <TT>/:</TT> in  
the next section.) 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y </TT></TD> 
<TD><TT>f </TT></TD> 
<TD><TT>z =: f C. y</TT></TD> 
<TD><TT>/: f</TT></TD> 
<TD><TT>(/: f) C. z</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde</TD> 
<TD><PRE>0 2 4 1 3</TD> 
<TD><PRE>acebd</TD> 
<TD><PRE>0 3 1 4 2</TD> 
<TD><PRE>abcde</TD> 
</PRE></TABLE> 
<H3>16.1.3  Atomic Representations of Permutations.</H3>
<p>
If <TT>y</TT> is a vector of length <TT>n</TT>, then there are altogether <TT>! n</TT> different permutations of <TT>y</TT>.  
 A table of all 
permutations of order <TT>n</TT> can be generated by the expression <TT>(tap n)</TT> where tap is a utility verb defined by:  
<PRE>
   tap =: i. @ ! A. i.
   tap 3
0 1 2
0 2 1
1 0 2
1 2 0
2 0 1
2 1 0
</PRE>
<p>
It can be seen that these permutations are in a well-defined order, and so any permutation of order 
<TT>n</TT> can be identified simply by its index in the table <TT>(tap n)</TT>.  This index is called the atomic 
representation of the permutation.  The monadic verb <TT>A.</TT> computes the atomic representation.  
For example,  
given an order-3 permutation, e.g. <TT>2 1 0</TT>,  then <TT>A. 2 1 0</TT> yields the index in the table <TT>(tap 3)</TT>.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A. 2 1 0</TT></TD> 
<TD><TT>5 { tap 3</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>5</TD> 
<TD><PRE>2 1 0</TD> 
</PRE></TABLE> 
<p>
Notice that <TT>A.</TT> gives its result as an extended integer <TT>(5x)</TT> rather than simply <TT>5</TT>.  
(Extended integers will be covered in  <A HREF="19.htm">Chapter 19</A>.) 
The reason is that 
since the table <TT>(tap n)</TT> is of length <TT>!n</TT>, that is, potentially very long, indexes into  
it may need to be very long numbers. 
<p>
The dyadic verb <TT>A.</TT> applies an atomic representation of a permutation. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>2 1 0 { 'PQR'</TT></TD> 
<TD><TT> 5 A. 'PQR'</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>RQP</TD> 
<TD><PRE>RQP</TD> 
</PRE></TABLE> 
<p>
Here is an example of the use of <TT>A.</TT>. 
The process of running 
through 
all the permutations of something 
(say to search for anagrams of a word) 
might take a very long time. 
Hence it might be desirable to  
run through them say 100 at a time. 
<p>
Here is a verb which finds a limited number of 
permutations.  
The argument is a boxed list: a vector 
to be permuted, followed by a starting permutation-number  
(that is, atomic index) followed by 
a count of the permutions to be found. 
<PRE>
   LPerms =: 3 : 0
'arg start count' =. y.
(start + i. count) A. " 0 1 arg
)
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>LPerms 'abcde'; 0; 4</TT></TD> 
<TD><TT>LPerms 'abcde'; 4; 4</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde 
abced 
abdce 
abdec</TD> 
<TD><PRE>abecd 
abedc 
acbde 
acbed</TD> 
</PRE></TABLE> 
<H2>16.2  Sorting</H2>
<p>
There is a built-in monad, <TT>/:</TT> (slash colon, 
called "Grade Up").  For a list 
<TT>L</TT>, the expression <TT>(/: L)</TT> gives  
a set of indices into <TT>L</TT>, and these indices 
are a permutation-vector. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>L =: 'barn'</TT></TD> 
<TD><TT>/: L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>barn</TD> 
<TD><PRE>1 0 3 2</TD> 
</PRE></TABLE> 
<p>
These indices select the items of <TT>L</TT> 
in ascending order. That is, 
the expression <TT>((/: L) { L)</TT> 
yields the items of <TT>L</TT> in order. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>L</TT></TD> 
<TD><TT>/: L</TT></TD> 
<TD><TT>(/: L) { L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>barn</TD> 
<TD><PRE>1 0 3 2</TD> 
<TD><PRE>abnr</TD> 
</PRE></TABLE> 
<p>
For sorting into descending order, 
the monad <TT>\:</TT>(backslash colon, called  
"Grade Down") can be used. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>L</TT></TD> 
<TD><TT>(\: L) { L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>barn</TD> 
<TD><PRE>rnba</TD> 
</PRE></TABLE> 
<p>
Since <TT>L</TT> is a character list, its items 
are sorted into alphabetical order. 
Numeric lists or boxed lists are sorted 
appropriately. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>N =: 3 1 4 5</TT></TD> 
<TD><TT>(/: N) { N</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>3 1 4 5</TD> 
<TD><PRE>1 3 4 5</TD> 
</PRE></TABLE> 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>B =: 'pooh';'bah';10;5</TT></TD> 
<TD><TT>(/: B) { B</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+----+---+--+-+ 
|pooh|bah|10|5| 
+----+---+--+-+</TD> 
<TD><PRE>+-+--+---+----+ 
|5|10|bah|pooh| 
+-+--+---+----+</TD> 
</PRE></TABLE> 
<p>
Now consider sorting the rows of a table. 
Here is an example of a table with 3 rows: 
<PRE>
   T =: (". ;. _2) 0 : 0
'WA' ;'Mozart';  1756
'JS' ;'Bach'  ;  1685
'CPE';'Bach'  ;  1714
)
</PRE>
<p>
Suppose we aim to sort the rows  
of the table into order of date-of-birth 
shown in column 2 (the third column). 
We say that column 2 contains the keys on which 
the table is to be sorted. 
<p>
We extract the keys with the verb  
<TT>2&{"1</TT>, generate the permutation vector 
with <TT>/:</TT> applied to the keys, 
 and then permute the table. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>T</TT></TD> 
<TD><TT>keys =: 2&{"1 T</TT></TD> 
<TD><TT>(/: keys) { T</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+---+------+----+ 
|WA |Mozart|1756| 
+---+------+----+ 
|JS |Bach  |1685| 
+---+------+----+ 
|CPE|Bach  |1714| 
+---+------+----+</TD> 
<TD><PRE>+----+----+----+ 
|1756|1685|1714| 
+----+----+----+</TD> 
<TD><PRE>+---+------+----+ 
|JS |Bach  |1685| 
+---+------+----+ 
|CPE|Bach  |1714| 
+---+------+----+ 
|WA |Mozart|1756| 
+---+------+----+</TD> 
</PRE></TABLE> 
<p>
The dyadic case of <TT>/:</TT> allows 
the expression <TT>(/: keys { T)</TT> 
to be abbreviated as <TT>(T /: keys)</TT>. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>(/: keys) { T</TT></TD> 
<TD><TT>T /: keys</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+---+------+----+ 
|JS |Bach  |1685| 
+---+------+----+ 
|CPE|Bach  |1714| 
+---+------+----+ 
|WA |Mozart|1756| 
+---+------+----+</TD> 
<TD><PRE>+---+------+----+ 
|JS |Bach  |1685| 
+---+------+----+ 
|CPE|Bach  |1714| 
+---+------+----+ 
|WA |Mozart|1756| 
+---+------+----+</TD> 
</PRE></TABLE> 
<p>
Suppose now we need to sort on two columns,  
say by last name, and then by initials.  
The keys are column 1 then column 0. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>keys =: 1 0  & { " 1 T</TT></TD> 
<TD><TT>T /: keys</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+------+---+ 
|Mozart|WA | 
+------+---+ 
|Bach  |JS | 
+------+---+ 
|Bach  |CPE| 
+------+---+</TD> 
<TD><PRE>+---+------+----+ 
|CPE|Bach  |1714| 
+---+------+----+ 
|JS |Bach  |1685| 
+---+------+----+ 
|WA |Mozart|1756| 
+---+------+----+</TD> 
</PRE></TABLE> 
<p>
These examples show that the keys can be 
a table,  
and the <TT>/:</TT> verb yields the permutation-vector 
which puts the rows of the table into order. 
In such a case,  
the first column of the table is the most significant, 
then the second column, and so on. 
<H3>16.2.1  Predefined Collating Sequences</H3>
<p>
Characters are sorted into "alphabetical order", numbers into 
"numerical order" and boxes into a well-defined order.  
The order for sorting all possible keys 
 of a given type is called a collating sequence (for keys of that type). 
We have three predefined collating sequences. 
The collating sequence for characters is the ASCII character set.  
The built-in J noun <TT>a.</TT> gives the value 
of all 256 characters in "alphabetical" order. Note that upper-case letters come before lower-case 
letters.  
<PRE>
   65 66 67 97 98 99 { a.
ABCabc
</PRE>
<p>
With numerical arguments, complex numbers are ordered by the real part then the imaginary part. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>n=:  0 1 _1 2j1 1j2 1j1</TT></TD> 
<TD><TT>n /: n</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>0 1 _1 2j1 1j2 1j1</TD> 
<TD><PRE>_1 0 1 1j1 1j2 2j1</TD> 
</PRE></TABLE> 
<p>
With boxed arrays, the ordering is by the contents of 
each box.  
The precedence is firstly by  
type, with  
numerical arrays preceding empty arrays preceding 
character arrays preceding boxed arrays: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>k=: (&lt; 'abc') ; 'pqr' ; 4 ; '' ; 3</TT></TD> 
<TD><TT>k /: k</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+-----+---+-++-+ 
|+---+|pqr|4||3| 
||abc||   | || | 
|+---+|   | || | 
+-----+---+-++-+</TD> 
<TD><PRE>+-+-++---+-----+ 
|3|4||pqr|+---+| 
| | ||   ||abc|| 
| | ||   |+---+| 
+-+-++---+-----+</TD> 
</PRE></TABLE> 
<p>
Within arrays of the same type, low-rank precedes 
high-rank.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>m=: 2 4 ; 3 ; (1 1 $ 1)</TT></TD> 
<TD><TT>m /: m</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+---+-+-+ 
|2 4|3|1| 
+---+-+-+</TD> 
<TD><PRE>+-+---+-+ 
|3|2 4|1| 
+-+---+-+</TD> 
</PRE></TABLE> 
<p>
Within arrays of the same type and rank, precedence depends on shape and content.
If the two arrays are  
the same, then the earlier takes precedence (that is, their 
original order is not disturbed). 
<PRE>
   a =: 2 3 $ 1 2 3 4 5 6
   b =: 3 2 $ 1 2 5 6 3 4
   c =: 1 3 $ 1 2 3
   d =: 1 3 $ 1 1 3
   
</PRE>
<p>

<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>w=:a;b;c;d </TT></TD> 
<TD><TT>w /: w</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+-----+---+-----+-----+ 
|1 2 3|1 2|1 2 3|1 1 3| 
|4 5 6|5 6|     |     | 
|     |3 4|     |     | 
+-----+---+-----+-----+</TD> 
<TD><PRE>+-----+-----+---+-----+ 
|1 1 3|1 2 3|1 2|1 2 3| 
|     |4 5 6|5 6|     | 
|     |     |3 4|     | 
+-----+-----+---+-----+</TD> 
</PRE></TABLE> 

<H3>16.2.2  User-Defined Collating Sequences</H3>
<p>
The keys are computed from the data. 
By choosing how to compute the keys, 
we can choose a collating sequence. 
<p>
For example, suppose a  
list of numbers is to be sorted into 
ascending order of absolute value. 
A suitable key-computing 
function would then be  
the "Magnitude" function, <TT>|</TT>.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>x=: 2 1 _3</TT></TD> 
<TD><TT>keys =: | x</TT></TD> 
<TD><TT>x /: keys</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>2 1 _3</TD> 
<TD><PRE>2 1 3</TD> 
<TD><PRE>1 2 _3</TD> 
</PRE></TABLE> 
<H2>16.3  Transpositions</H2>
<p>
The monadic verb <TT>|:</TT> will transpose a matrix, that is, interchange the first and second axes. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT> M =: 2 3 $ 'abcdef' </TT></TD> 
<TD><TT>|: M</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>ad 
be 
cf</TD> 
</PRE></TABLE> 
<p>
More generally, <TT>|:</TT> will reverse the order of the axes of a n-dimensional array.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>N =: 2 2 2 $ 'abcdefgh' </TT></TD> 
<TD><TT>|: N</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>ab 
cd 
 
ef 
gh</TD> 
<TD><PRE>ae 
cg 
 
bf 
dh</TD> 
</PRE></TABLE> 
<p>
Dyadic transpose will permute the axes according to the (full or abbreviated) permutation-vector 
 given as left argument. For a 3-dimensional array, all possible permutations are 
given by <TT>(tap 3)</TT> 
<PRE>
   'A B C D E F' =: tap 3
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>N </TT></TD> 
<TD><TT>A |: N </TT></TD> 
<TD><TT>B |: N </TT></TD> 
<TD><TT>C |: N </TT></TD> 
<TD><TT> F |: N </TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>ab 
cd 
 
ef 
gh</TD> 
<TD><PRE>ab 
cd 
 
ef 
gh</TD> 
<TD><PRE>ac 
bd 
 
eg 
fh</TD> 
<TD><PRE>ab 
ef 
 
cd 
gh</TD> 
<TD><PRE>ae 
cg 
 
bf 
dh</TD> 
</PRE></TABLE> 
<p>
A boxed abbreviated argument can be given.   
Two or more boxed axis-numbers are 
run together to form a single axis.   
With two dimensions, this is equivalent to taking the diagonal. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>K =:  i. 3 3 </TT></TD> 
<TD><TT>(&lt; 0 1) |: K</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>0 1 2 
3 4 5 
6 7 8</TD> 
<TD><PRE>0 4 8</TD> 
</PRE></TABLE> 
<H2>16.4  Reversing,  Rotating and Shifting</H2>
<H3>16.4.1  Reversing</H3>
<p>
Monadic <TT>|</TT>. will reverse the order of the items of its argument.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT> y </TT></TD> 
<TD><TT> |. y</TT></TD> 
<TD><TT> M </TT></TD> 
<TD><TT> |. M</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde</TD> 
<TD><PRE>edcba</TD> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>def 
abc</TD> 
</PRE></TABLE> 
<p>
Notice that "reversing the items" means reversing along the first  
 axis. Reversal along other axes can be achieved with the 
rank conjunction <TT>(")</TT>. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>N </TT></TD> 
<TD><TT>|. N</TT></TD> 
<TD><TT>|." 1 N</TT></TD> 
<TD><TT>|. " 2 N</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>ab 
cd 
 
ef 
gh</TD> 
<TD><PRE>ef 
gh 
 
ab 
cd</TD> 
<TD><PRE>ba 
dc 
 
fe 
hg</TD> 
<TD><PRE>cd 
ab 
 
gh 
ef</TD> 
</PRE></TABLE> 
<H3>16.4.2  Rotating</H3>
<p>
Dyadic <TT>|.</TT> rotates the items of <TT>y</TT> by an amount given by the argument <TT>x</TT>. 
A positive value for <TT>x</TT> rotates to the left. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT> y </TT></TD> 
<TD><TT> 1 |. y</TT></TD> 
<TD><TT> _1 |. y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde</TD> 
<TD><PRE>bcdea</TD> 
<TD><PRE>eabcd</TD> 
</PRE></TABLE> 
<p>
Successive numbers in <TT>x</TT> rotate y along successive axes: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT> M  </TT></TD> 
<TD><TT> 1 2 |. M</TT></TD> 
<TD><TT> N </TT></TD> 
<TD><TT> 1 2 |. N </TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>fde 
cab</TD> 
<TD><PRE>ab 
cd 
 
ef 
gh</TD> 
<TD><PRE>ef 
gh 
 
ab 
cd</TD> 
</PRE></TABLE> 
<H3>16.4.3  Shifting</H3>
<p>
The items which would be brought around by  
cyclic rotation can instead be replaced with  
a fill-item. 
A shifting verb is written <TT>(|. !. f)</TT> where <TT>f</TT> is the fill-item. 
<PRE>
   ash   =: |. !. '*'    NB. alphabetic shift
   nsh   =: |. !. 0      NB. numeric shift
   
             
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y </TT></TD> 
<TD><TT>_2 ash y</TT></TD> 
<TD><TT>z =: 2 3 4</TT></TD> 
<TD><TT>_1 nsh z</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcde</TD> 
<TD><PRE>**abc</TD> 
<TD><PRE>2 3 4</TD> 
<TD><PRE>0 2 3</TD> 
</PRE></TABLE> 
<p>
This is the end of Chapter 16 
  </tr> </table>

<HR> 

<p ALIGN=LEFT>
<A HREF="17.htm"> NEXT </A> <BR>
<A HREF="book.htm#toc"> Table of Contents </A>
</p> 

<HR>
<p><FONT SIZE=-2>Copyright &copy; Roger Stokes 1999. 
This material may be freely reproduced,
provided that this copyright notice and provision is also reproduced.
</p>
 
<p ALIGN=CENTER> last updated 10 September 1999</p>
</BODY>
</HTML>
