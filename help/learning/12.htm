<HTML>
<HEAD>
<TITLE>Ch 12: Explicit Operators</TITLE>

<STYLE TYPE="text/css">
<!--
TT  {font-size: 11pt; COLOR: BLUE}
PRE {font-size: 11pt; COLOR: BLUE}
-->
</STYLE>

</HEAD>

<BODY BGCOLOR=WHITE>

<table border="0" cellpadding="5" cellspacing="0"  width="100%">
 <tr> <td valign="top" width="17%"> <p> </td>
      <td valign="top" width="83%"> 
<H1>Chapter 12: Explicitly Defined Operators</H1>
<p>
This chapter covers explicit definition of operators, that is, adverbs and conjunctions  
defined with the colon conjunction. The scheme is:  
<PRE>
     1 : body     is an adverb 
     2 : body     is a conjunction 
</PRE>
<p>
where <TT>body</TT> is one or more lines of text.  
The possibilities for the result produced by an operator 
are: a tacit verb, an explicit verb, a noun or another operator. We we will look at each case in turn. 
<H2>12.1  Operators Generating Tacit Verbs</H2>
<p>
Recall from  <A HREF="07.htm">Chapter 07</A> the built-in rank conjunction <TT>"</TT>.  
For any verb <TT>u</TT>, the expression <TT>u"0</TT> is a verb which applies <TT>u</TT> to the 0-cells (scalars) of its argument.  
<p>
Now suppose we aim to define an adverb <TT>A</TT>,  
to generate a verb according to the scheme: for any verb <TT>u</TT> 
<PRE>
     u A   is to be     u " 0
   
</PRE>
<p>
Adverb <TT>A</TT> is defined explicitly like this:  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A =: 1 : 'u. " 0'</TT></TD> 
<TD><TT>f =: &lt; A</TT></TD> 
<TD><TT>f  1 2</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 : 'u. " 0'</TD> 
<TD><PRE>&lt;"0</TD> 
<TD><PRE>+-+-+ 
|1|2| 
+-+-+</TD> 
</PRE></TABLE> 
<p>
In the definition <TT>(A =: 1 : 'u. " 0')</TT>  
the left argument of the colon is <TT>1</TT>, meaning 
"adverb".  
<p>
The right argument is the string <TT>'u. " 0'</TT>.  
This string has the form of a tacit verb,  
where <TT>u.</TT> stands for whatever verb will be supplied as argument to the adverb <TT>A</TT>.  
<p>
Adverbs are so called because, in English grammar,  
adverbs modify verbs.  In J by contrast, 
adverbs and conjunctions in general can take nouns  
or verbs as arguments. In the following example, 
adverb <TT>W</TT> is to generate a verb 
according to the scheme: for integer <TT>u</TT>  
<PRE>
    u W    is to be   &lt; " u
   
</PRE>
<p>
that is, <TT>u W</TT> boxes the rank-<TT>u</TT> cells of the argument. 
The definition of <TT>W</TT> is shown by: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>W =: 1 : '&lt; " u.'</TT></TD> 
<TD><TT>0 W</TT></TD> 
<TD><TT>z =: 'abc'</TT></TD> 
<TD><TT> 0 W z</TT></TD> 
<TD><TT>1 W z</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 : '&lt; " u.'</TD> 
<TD><PRE>&lt;"0</TD> 
<TD><PRE>abc</TD> 
<TD><PRE>+-+-+-+ 
|a|b|c| 
+-+-+-+</TD> 
<TD><PRE>+---+ 
|abc| 
+---+</TD> 
</PRE></TABLE> 
<p>
For another example of an adverb,  
recall the dyad <TT>#</TT> where <TT>x # y</TT> 
selects items from <TT>y</TT> according to the  
bitstring <TT>x</TT>. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y =: 1 0 2 3</TT></TD> 
<TD><TT> 1 0 1 1 # y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 0 2 3</TD> 
<TD><PRE>1 2 3</TD> 
</PRE></TABLE> 
<p>
To select items greater than 0, we can apply  
the test-verb <TT>(>&0)</TT> 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y </TT></TD> 
<TD><TT>>&0 y</TT></TD> 
<TD><TT>(>&0 y) #  y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 0 2 3</TD> 
<TD><PRE>1 0 1 1</TD> 
<TD><PRE>1 2 3</TD> 
</PRE></TABLE> 
<p>
A tacit verb to select items greater than <TT>0</TT>  
can be written as a fork <TT>f</TT>: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>f =: >&0 # ]</TT></TD> 
<TD><TT>f y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>>&0 # ]</TD> 
<TD><PRE>1 2 3</TD> 
</PRE></TABLE> 
<p>
This fork can be generalised into an adverb, <TT>B</TT> 
say,  
to generate a verb to select items according  
to whatever verb is supplied in place of the test <TT>>&0</TT>.   
<PRE>
   B =: 1 : 'u. # ]'
</PRE>
<p>
If we supply <TT>>&1</TT> as a test-verb:   
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>g =: (>&1) B</TT></TD> 
<TD><TT> y </TT></TD> 
<TD><TT>g y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>>&1 # ]</TD> 
<TD><PRE>1 0 2 3</TD> 
<TD><PRE>2 3</TD> 
</PRE></TABLE> 
<p>
We see that the body of <TT>B</TT> is the  
fork to be generated, with <TT>u.</TT> standing 
for the argument-verb to be supplied. 
<p>
Conjunctions, taking two arguments, are defined with <TT>(2 : '...')</TT>. 
The left argument is <TT>u.</TT> and the right is <TT>v.</TT> 
<p>
For example, consider a conjunction <TT>THEN</TT>, to apply one verb and then apply 
another to the result, that is, a composition.  
The scheme we want is: 
<PRE>
       u THEN v     is to be v @: u
</PRE>
<p>
and the definition of <TT>THEN</TT> is: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>THEN =: 2 : 'v. @: u.'</TT></TD> 
<TD><TT>h =: *: THEN &lt;</TT></TD> 
<TD><TT>h 1 2 3</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>2 : 'v. @: u.'</TD> 
<TD><PRE>&lt;@:*:</TD> 
<TD><PRE>+-----+ 
|1 4 9| 
+-----+</TD> 
</PRE></TABLE> 
<p>
For another example, consider  
counting (with <TT>#</TT>) those items of a list which are  
greater than 0. A verb to do this might be: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>foo =: # @: (>&0 # ])</TT></TD> 
<TD><TT>y </TT></TD> 
<TD><TT>foo y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>#@:(>&0 # ])</TD> 
<TD><PRE>1 0 2 3</TD> 
<TD><PRE>3</TD> 
</PRE></TABLE> 
<p>
We can generalize <TT>foo</TT> to apply a given verb <TT>u</TT> 
to items selected by another given verb <TT>v</TT>. 
We define a conjunction <TT>C</TT> with the scheme 
<PRE>
   NB.  u C v   is to be   u @: (v # ]) 
   
</PRE>
<p>
and the definition of <TT>C</TT> is straightforwardly: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>C =: 2 : 'u. @: (v. # ])'</TT></TD> 
<TD><TT>f =: # C (>&0)</TT></TD> 
<TD><TT>y</TT></TD> 
<TD><TT>f y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>2 : 'u. @: (v. # ])'</TD> 
<TD><PRE>#@:(>&0 # ])</TD> 
<TD><PRE>1 0 2 3</TD> 
<TD><PRE>3</TD> 
</PRE></TABLE> 
<H3>12.1.1  Multiline Bodies</H3>
<p>
The right argument of colon we may call the body of the definition of our operator.  
In the examples so far, the body was a string,  a schematic tacit verb, 
for example <TT>'v .@: u.'</TT> .   
This is the verb to be delivered by  our operator.   
More generally, the body can be several lines. The idea is that, 
when the operator is applied to its argument,  
the whole body is executed. That is, each line is 
evaluated in turn and the result delivered is  
the value of the last line evaluated. This is exactly analogous to explicit verbs,  
except that here the result is a value of type "function"  rather than of type  "array". 
<p>
Here is an example of a multi-line body,  
the previous example done in two steps.  
To apply <TT>u</TT> to items selected by <TT>v</TT>, a scheme  
for conjunction <TT>D</TT> could be written: 
<PRE>
     u D v  is to be  (u @: select) where select is v # ] 
</PRE>
<p>
and <TT>D</TT> defined by 
<PRE>
   D =: 2 : 0
select =: v. # ]
u. @: select
)
</PRE>
<p>
Again counting items greater than 0, we have 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>f =: # D (>&0)</TT></TD> 
<TD><TT>y</TT></TD> 
<TD><TT>f y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>#@:select</TD> 
<TD><PRE>1 0 2 3</TD> 
<TD><PRE>3</TD> 
</PRE></TABLE> 
<p>
The first line of <TT>D</TT> computes an inner function <TT>select</TT> from the right argument. 
The second line composes <TT>select</TT> with the left  
argument, and this is the result-verb delivered  
by <TT>D</TT>. 
<p>
Now this definition has an undesirable feature: 
we see that <TT>select</TT> is defined as a global (with <TT>=:</TT>). 
It would be better if <TT>select</TT> were local. 
<p>
However, we can see, by looking at the 
value of the verb <TT>f</TT> above, 
that <TT>select</TT> must be available when we apply 
<TT>f</TT>. If <TT>select</TT> is local to 
<TT>D</TT>, it will not be available when needed.  
<p>
We can in effect make <TT>select</TT> local  
by using the "Fix" adverb  <TT>(f.)</TT> (letter-f dot.) 
The effect 
of applying "Fix" to a verb 
is to produce an equivalent verb 
in which names are replaced  
by  
by their corresponding definitions. 
That is, "Fix" resolves a tacit verb into its 
primitives. For example: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>p =: +</TT></TD> 
<TD><TT>q =: *</TT></TD> 
<TD><TT>r =: p,q</TT></TD> 
<TD><TT>r f.</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+</TD> 
<TD><PRE>*</TD> 
<TD><PRE>p , q</TD> 
<TD><PRE>+ , *</TD> 
</PRE></TABLE> 
<p>
Here is how we use Fix to enable <TT>select</TT> 
to be local.  In the example below, notice that 
we Fix the result-expression 
on the last line: 
<PRE>
   E =: 2 : 0
select =. v. # ]
(u. @: select) f.
)
   
</PRE>
<p>
Now a verb to count greater-than-0 items can be written: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>g =: # E (>&0)</TT></TD> 
<TD><TT>y</TT></TD> 
<TD><TT>g y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>#@:(>&0 # ])</TD> 
<TD><PRE>1 0 2 3</TD> 
<TD><PRE>3</TD> 
</PRE></TABLE> 
<p>
We see that <TT>g</TT>, unlike <TT>f</TT>, has no local names.  
<H2>12.2  Explicit Operators Generating Explicit Verbs</H2>
<H3>12.2.1  Adverb Generating Monad</H3>
<p>
Consider the following explicit monadic verb, <TT>e</TT>.  
It selects items greater than 0, by 
applying the test-verb <TT>>&0</TT>.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>e =: 3 : '(>&0 y.) # y.'</TT></TD> 
<TD><TT>y</TT></TD> 
<TD><TT>e y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>3 : '(>&0 y.) # y.'</TD> 
<TD><PRE>1 0 2 3</TD> 
<TD><PRE>1 2 3</TD> 
</PRE></TABLE> 
<p>
We can generalise <TT>e</TT> to form an adverb, <TT>F</TT> say, 
which selects items according to a supplied  
test-verb. The scheme we want is: for any verb <TT>u</TT>:  
<PRE>
     u F   is to be    3 : '(u y). # y.'
   
</PRE>
<p>
Adverb <TT>F</TT> is defined by: 
<PRE>
   F  =: 1 : '(u. y.) # y.'
</PRE>
<p>
Now the verb <TT>>&1 F</TT> will select items greater than 1: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y</TT></TD> 
<TD><TT>>&1 F y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 0 2 3</TD> 
<TD><PRE>2 3</TD> 
</PRE></TABLE> 
<p>
In the body of <TT>F</TT> 
the variable <TT>u.</TT> stands for a verb to be  
supplied as argument to adverb <TT>F</TT>. 
If this argument is say <TT>>&1</TT>, then 
<TT>y.</TT> stands for an argument to the generated 
explicit verb <TT>3 : '(>&1 y.) # y.'</TT>. 
<p>
That is, our method of defining  
the generated verb is to write out the body 
of an explicit definition, with <TT>u.</TT> 
at places where a supplied verb is to be substituted. 
<H3>12.2.2  Conjunction Generating Monad</H3>
<p>
A conjunction takes two arguments, 
called <TT>u.</TT> and <TT>v.</TT>. Here is an example  
of a conjunction to generate an explicit 
monad.   
<p>
As before, we specify the generated verb, 
by writing out the body of an explicit verb. Here 
<TT>y.</TT> stands for the argument of the generated verb 
and <TT>u.</TT> and <TT>v.</TT> stand for argument-verbs  
to be supplied to the conjunction.  
In this example the body is multi-line. As before, 
<TT>u.</TT> will be applied to items selected by <TT>v.</TT> 
<PRE>
   G  =: 2 : 0
selected =. (v. y.) # y.
u. selected
)
</PRE>
<p>
Now a verb to count greater-than-zero items  
can be written as <TT># G (>&0)</TT>: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT> y </TT></TD> 
<TD><TT># G (>&0)  y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 0 2 3</TD> 
<TD><PRE>3</TD> 
</PRE></TABLE> 
<H3>12.2.3  Generating a Dyad</H3>
<p>
For the next example,  
let us define a conjunction generating an explicit dyad. 
Suppose we want a conjunction <TT>H</TT> such that, schematically, 
<PRE>
     u H v    is to be    4 : '(u x.) + (v y.)'
   
</PRE>
<p>
Now it is a fact that all the generated verbs 
are defined in terms of <TT>3 :</TT>, not <TT>4 :</TT>.  
We can write a dyad with <TT>3 :</TT> by beginning a  
multi-line body  
with the solo colon which  
separates the monadic case from the dyadic. 
<p>
Thus, schematically, we have to say, for verbs <TT>u</TT> and <TT>v</TT>: 
<PRE>
     u H v    is to be    3 : 0
                          :    
                          (u x.) + (v y.)
                          ) 
   
</PRE>
<p>
The explicit definition of <TT>H</TT> follows straightforwardly: 
<PRE>
   H =: 2 : 0
:
(u. x.) + (v. y.)
)
      
</PRE>
<p>
We see: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>(*: 2) + (%: 16)</TT></TD> 
<TD><TT>2 (*: H %:) 16</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>8</TD> 
<TD><PRE>8</TD> 
</PRE></TABLE> 
<H3>12.2.4  Review</H3>
<p>
So far, we have seen that for operators  
introduced with 
<TT>1 :</TT> or <TT>2 :</TT>, there are two kinds of definition.  
<p>
<UL> 
<LI>The first kind generates a tacit function.  
The body of the operator 
is executed (that, is evaluated) to compute the value  
of the result-function.  
Notice that the argument-variables 
occurring in the body are <TT>u.</TT> or <TT>v.</TT> 
<p>
<LI>The second kind generates an explicit function.  
The body of the operator 
IS the body of the generated function,  
after substitution of arguments. Notice that the argument-variables 
occurring in the body are <TT>u.</TT> or <TT>v.</TT> or <TT>x.</TT> or <TT>y.</TT>. 
</UL> 
The J system recognises which kind is intended by  
determining which of the argument-variables <TT>u. v. x. y.</TT> 
occur in the the body.   
<p>
If we have ONLY <TT>u.</TT> or <TT>v.</TT> or both, then the generated function is tacit. 
<p>
If we have BOTH (<TT>u.</TT> or <TT>v.</TT>) AND (<TT>x.</TT> or <TT>y.</TT>) then 
the generated function is explicit. 
<p>
On this basis, the cases we have considered are: 
<PRE> 
1 : '..  u.  ..'             tacit-generating adverb  
<p>
2 : '..  u.  v. ..'          tacit-generating conjunction 
<p>
1 : '..  u.  y. ..'          explicit-monad-generating adverb  
<p>
1 : '..  u.  x.  y. ..'      explicit-dyad-generating adverb 
<p>
2 : '..  u.  v.  y. ..'      explicit-monad-generating conjunction 
<p>
2 : '..  u.  v.  x.  y. ..'  explicit-dyad-generating conjunction 
</PRE> 
<H3>12.2.5  Alternative Names for Argument-Variables</H3>
<p>
The arguments to operators may be nouns or verbs. 
There is a way of constraining 
arguments to be nouns only, that is,  
to cause verbs to be signalled as errors.  
 To impose the constraint, we write the  
argument-variables as <TT>m.</TT> and <TT>n.</TT> rather than as <TT>u.</TT> and <TT>v.</TT>. 
For example, without the constraint we could write: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>P =: 1 : '+ & u.'</TT></TD> 
<TD><TT> * P</TT></TD> 
<TD><TT>7 P</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 : '+ & u.'</TD> 
<TD><PRE>+&*</TD> 
<TD><PRE>+&7</TD> 
</PRE></TABLE> 
<p>
With the constraint we write: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>Q =: 1 : '+ & m.'</TT></TD> 
<TD><TT> * Q</TT></TD> 
<TD><TT> 7 Q</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 : '+ & m.'</TD> 
<TD><PRE>error</TD> 
<TD><PRE>+&7</TD> 
</PRE></TABLE> 
<p>
We said above that with ONLY <TT>u.</TT> or <TT>v.</TT> or both 
occurring as argument variables, we get a tacit verb 
generated. 
For the sake of completeness, we should add 
<TT>m.</TT> and <TT>n.</TT> to this list. 
<p>
Furthermore, if the only argument variables are  
<TT>x.</TT> or <TT>y.</TT> or both, we get a tacit verb, not 
an explicit verb.  
That is, in the absence of <TT>u.</TT> or <TT>v.</TT> 
or <TT>m.</TT> or <TT>n.</TT> then <TT>x.</TT> and <TT>y.</TT> are equivalent to  
<TT>u.</TT> and <TT>v.</TT>.    
<H3>12.2.6  Executing the Body (Or Not)</H3>
<p>
To demonstrate when the body gets executed (or evaluated), we can use  
a utility verb which displays its argument on-screen:   
<PRE>
   display =: (1 !: 2) & 2
</PRE>
<p>
Now insert <TT>display 'hello'</TT> into a tacit-generating operator:  
<PRE>
     R =: 2 : 0
display 'hello'
select =. v. # ]   
(u. @: select) f.
)
</PRE>
<p>
When <TT>R</TT> is applied to its argument,  
the body is demonstrably executed: 
<PRE>
   f =: # R (>&0)
hello
   
   f 1 0 2 0 3
3
</PRE>
<p>
By contrast, if we do the same with an explicit-generating operator:   
<PRE>
   S =: 2 : 0
display 'hello'
selected =. (v. y.) # y.  
u. selected
)
</PRE>
<p>
we see that the body of <TT>S</TT> is NOT executed when the operator is applied to its argument: 
but it IS executed when the generated verb <TT>g</TT> is applied. 
<PRE>
   g =: # S (>&0)
   g 1 0 2 0 3
hello
3
</PRE>
<H2>12.3  Operators Generating Nouns</H2>
<p>
Operators can generate nouns as well as verbs. 
Here is an example. 
<p>
A fixed point of a function <TT>f</TT> is a value <TT>p</TT> 
such that <TT>(f p) = p</TT>. If we take 
<TT>f</TT> to be  
<PRE>
   f =: 3 : '2.8 * y. * (1-y.)'
</PRE>
<p>
then we see that <TT>0.642857</TT> is a fixed-point of <TT>f</TT> 
<PRE>
   f 0.642857
0.642857
</PRE>
<p>
Not every function has a fixed point, but if there is one 
we may be able to find it by repeatedly  
applying the function (with <TT>^: _</TT>) to a suitable starting value. 
A crude fixed-point-finder can be written as an  
adverb <TT>FPF</TT> which takes the given function as argument, 
with <TT>0.5</TT> for a starting value. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>FPF =: 1 : '(u. ^: _ ) 0.5'</TT></TD> 
<TD><TT>p =: f FPF</TT></TD> 
<TD><TT>f p</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 : '(u. ^: _ ) 0.5'</TD> 
<TD><PRE>0.642857</TD> 
<TD><PRE>0.642857</TD> 
</PRE></TABLE> 
<H2>12.4  Operators Generating Operators</H2>
<p>
Here is an example of an adverb generating an adverb. 
<p>
First note that (as covered in  <A HREF="13.htm">Chapter 13</A>) 
if we supply one argument to  
a conjunction we get an adverb.  
The expression <TT>(@: *:)</TT> is an adverb which means  
"composed with square". To illustrate: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>CS =: @: *:</TT></TD> 
<TD><TT>- CS</TT></TD> 
<TD><TT> - CS  2 3</TT></TD> 
<TD><TT>- *: 2 3</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>@:*:</TD> 
<TD><PRE>-@:*:</TD> 
<TD><PRE>_4 _9</TD> 
<TD><PRE>_4 _9</TD> 
</PRE></TABLE> 
<p>
Now back to the main example of this section. 
We aim to define an explicit adverb, <TT>K</TT> say, 
which generates an adverb according to the scheme: for a verb <TT>u</TT> 
<PRE>
      u K    is to be     @: u
   
</PRE>
<p>
Adverb <TT>K</TT> can be defined as below. We see that adverb <TT>K</TT> 
delivers as a result adverb <TT>L</TT>: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>K =: 1 : '@: u.' </TT></TD> 
<TD><TT>L =: *: K</TT></TD> 
<TD><TT>- L</TT></TD> 
<TD><TT>- L 2 3</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 : '@: u.'</TD> 
<TD><PRE>@:*:</TD> 
<TD><PRE>-@:*:</TD> 
<TD><PRE>_4 _9</TD> 
</PRE></TABLE> 
<p>
This is the end of Chapter 12. 
  </tr> </table>

<HR> 
<p ALIGN=LEFT>
<A HREF="13.htm"> NEXT </A> <BR>
<A HREF="book.htm#toc"> Table of Contents </A>
</p> 

<HR>
<p ALIGN=CENTER> <FONT SIZE=-2>Copyright &copy; Roger Stokes 2001. 
This material may be freely reproduced,
provided that this copyright notice is also reproduced.
</p>
 
<p ALIGN=CENTER> last updated 11Jan 01</p>
</BODY>
</HTML>

