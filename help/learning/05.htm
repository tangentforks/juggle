<HTML>
<HEAD>
<TITLE>Ch 5: Building Arrays</TITLE>

<STYLE TYPE="text/css">
<!--
TT  {font-size: 11pt; COLOR: BLUE}
PRE {font-size: 11pt; COLOR: BLUE}
-->
</STYLE>

</HEAD>

<BODY BGCOLOR=WHITE>

<table border="0" cellpadding="5" cellspacing="0"  width="100%">
 <tr> <td valign="top" width="17%"> <p> </td>
      <td valign="top" width="83%"> 
<H1>Chapter 5: Building Arrays</H1>
<p>
This chapter is about  building arrays.  First we look at building arrays from lists, and then at joining  
  arrays together in various ways to make larger arrays. 
<H2>5.1  Building Arrays by Shaping Lists</H2>
<p>
The dyadic verb <TT>$</TT> (dollar) is called "Shape".   
The expression <TT>(x $ y)</TT> produces an array of the items of the list <TT>y</TT>, with shape <TT>x</TT>, that is,  
with dimensions given by the list <TT>x</TT>. For example: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>2 2 $ 0 1 2 3</TT></TD> 
<TD><TT>2 3 $ 'ABCDEF'</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>0 1 
2 3</TD> 
<TD><PRE>ABC 
DEF</TD> 
</PRE></TABLE> 
<p>
If the list <TT>y</TT> contains fewer than the number of items needed, then  
<TT>y</TT> is re-used in cyclical fashion to make up the number of items needed. This means that  
an array can be built to show some simple patterning, such as all elements being the same, for example.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>2 3 $ 'ABCD'</TT></TD> 
<TD><TT>2 2 $ 1</TT></TD> 
<TD><TT>3 3 $ 1 0 0 0</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>ABC 
DAB</TD> 
<TD><PRE>1 1 
1 1</TD> 
<TD><PRE>1 0 0 
0 1 0 
0 0 1</TD> 
</PRE></TABLE> 
<p>
Instead of re-using values from <TT>y</TT>, a value  
to fill the array can be specified with the  
"Customize"  conjunction 
<TT>(!.)</TT> (exclamation-mark dot). 
<PRE>
   2 3 ($ !. '*') 'ab'
ab*
***
</PRE>
<p>
The "Shape" verb, dyadic <TT>$</TT>,  
has a companion verb, "ShapeOf" (monadic <TT>$</TT>), which yields the list-of-dimensions, that is, shape, of its argument.  
To illustrate:  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A =: 2 3 $ 'ABCDEF'</TT></TD> 
<TD><TT>$ A</TT></TD> 
<TD><TT>a =: 'pqr'</TT></TD> 
<TD><TT>$ a</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>ABC 
DEF</TD> 
<TD><PRE>2 3</TD> 
<TD><PRE>pqr</TD> 
<TD><PRE>3</TD> 
</PRE></TABLE> 
<p>
An array can be of length zero in any of its dimensions.  
If <TT>EL</TT> is a zero-length, or empty, list  
then it has no items, and so, after appending an item to it, the result will have one item. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>EL =: 0$0</TT></TD> 
<TD><TT># EL</TT></TD> 
<TD><TT>EL , 1</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE></TD> 
<TD><PRE>0</TD> 
<TD><PRE>1</TD> 
</PRE></TABLE> 
<p>
Similarly, if <TT>ET</TT> is an empty table with no rows, and say, 3 columns, then   
after adding a row, the result will have one row. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>ET =: 0 3 $ 'x' </TT></TD> 
<TD><TT>$ ET</TT></TD> 
<TD><TT> $ ET , 'pqr' </TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE></TD> 
<TD><PRE>0 3</TD> 
<TD><PRE>1 3</TD> 
</PRE></TABLE> 
<p>
It sometimes occurs that we need to build a scalar.  
A scalar has no dimensions, that is, its dimension-list is empty.   
We can give an empty list as the  left argument of <TT>$</TT> to make a scalar: 
<PRE>
   (0$0) $ 99
99
</PRE>
<p>
We said that <TT>(x $ y)</TT> produces an <TT>x</TT>-shaped array of the items of <TT>y</TT>.  
If <TT>y</TT> is a table, then each item of <TT>y</TT> will itself be a list (a row).  
Hence in general the shape of <TT>(x$y)</TT> will be not just <TT>x</TT>,  
but rather <TT>x</TT> followed by the shape of an item of <TT>y</TT>. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT>3 $ A</TT></TD> 
<TD><TT>$ 3 $ A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>ABC 
DEF</TD> 
<TD><PRE>ABC 
DEF 
ABC</TD> 
<TD><PRE>3 3</TD> 
</PRE></TABLE> 
<p>
The next sections look at building new arrays by joining together arrays we already have. 
<H2>5.2  Appending, or Joining End-to-End</H2>
<p>
Recall that any array can be regarded as a list of items,  
so that for example the items of a table are its rows.   
The verb , (comma) is called "Append".  
The expression <TT>(x,y)</TT> is a list of the items of <TT>x</TT> followed by the items of <TT>y</TT>. 
<PRE>
   B =: 2 3 $ 'UVWXYZ'
   b =:   3 $ 'uvw'
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>a</TT></TD> 
<TD><TT>b</TT></TD> 
<TD><TT>a , b</TT></TD> 
<TD><TT>A</TT></TD> 
<TD><TT>B</TT></TD> 
<TD><TT>A , B</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>pqr</TD> 
<TD><PRE>uvw</TD> 
<TD><PRE>pqruvw</TD> 
<TD><PRE>ABC 
DEF</TD> 
<TD><PRE>UVW 
XYZ</TD> 
<TD><PRE>ABC 
DEF 
UVW 
XYZ</TD> 
</PRE></TABLE> 
<p>
In the example of <TT>(A,B)</TT> above. the items of <TT>A</TT> are lists of length 3,  
and so are the items of <TT>B</TT>. Hence items of <TT>A</TT> are compatible with, that is,  
have the same rank and length as items of <TT>B</TT>.  What if they do not?   
In this case the "Append" verb will helpfully try to stretch one argument to fit the other,  
by bringing them to the same rank, padding to length, and replicating scalars as necessary.  
This is shown the following examples. 
<H3>5.2.1  Bringing To Same Rank</H3>
<p>
Suppose we want to append a row to a table.  
For example, consider appending the 3-character list <TT>b</TT> (above) to the 2 by 3 table <TT>A</TT> 
(above) to form a new row.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A </TT></TD> 
<TD><TT>b </TT></TD> 
<TD><TT>A , b</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>ABC 
DEF</TD> 
<TD><PRE>uvw</TD> 
<TD><PRE>ABC 
DEF 
uvw</TD> 
</PRE></TABLE> 
<p>
Notice that we want the two items of <TT>A</TT> to be followed by the single item of <TT>b</TT>,  
but <TT>b</TT> is not a 1-item  affair.   
We could do it by reshaping <TT>b</TT> into a 1 by 3 table, that is, by raising the rank of <TT>b</TT>. 
However, this is not necessary, because, as we see, the "Append" verb has automatically 
 stretched the low-rank argument into a 1-item array, by supplying leading dimension(s) of 1 as necessary.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT>b</TT></TD> 
<TD><TT>A , (1 3 $ b)</TT></TD> 
<TD><TT>A , b</TT></TD> 
<TD><TT>b , A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>ABC 
DEF</TD> 
<TD><PRE>uvw</TD> 
<TD><PRE>ABC 
DEF 
uvw</TD> 
<TD><PRE>ABC 
DEF 
uvw</TD> 
<TD><PRE>uvw 
ABC 
DEF</TD> 
</PRE></TABLE> 
<H3>5.2.2  Padding To Length</H3>
<p>
When the items of one argument are shorter than the items of the other, they will be padded out to length.  
 Characters arrays are padded with the blank character, numerical arrays with zero.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT>A , 'XY'</TT></TD> 
<TD><TT>(2 3 $ 1) , 9 9</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>ABC 
DEF</TD> 
<TD><PRE>ABC 
DEF 
XY</TD> 
<TD><PRE>1 1 1 
1 1 1 
9 9 0</TD> 
</PRE></TABLE> 
<H3>5.2.3  Replicating Scalars</H3>
<p>
A scalar argument of "Append" is replicated as necessary to match the other argument.    
 In the following example, notice how the scalar <TT>'*'</TT> is replicated, but the vector <TT>(1 $ '*')</TT> is padded.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT>A , '*'</TT></TD> 
<TD><TT>A , 1 $ '*'</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>ABC 
DEF</TD> 
<TD><PRE>ABC 
DEF 
***</TD> 
<TD><PRE>ABC 
DEF 
*</TD> 
</PRE></TABLE> 
<H2>5.3  Stitching, or Joining Side-to-Side</H2>
<p>
The verb <TT>,.</TT> (comma dot) is called "Stitch".  
In the expression <TT>(x ,. y)</TT> each item of <TT>x</TT> has the corresponding item of <TT>y</TT> appended. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>a</TT></TD> 
<TD><TT>b</TT></TD> 
<TD><TT>a ,. b</TT></TD> 
<TD><TT>A</TT></TD> 
<TD><TT>B</TT></TD> 
<TD><TT>A ,. B</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>pqr</TD> 
<TD><PRE>uvw</TD> 
<TD><PRE>pu 
qv 
rw</TD> 
<TD><PRE>ABC 
DEF</TD> 
<TD><PRE>UVW 
XYZ</TD> 
<TD><PRE>ABCUVW 
DEFXYZ</TD> 
</PRE></TABLE> 
<H2>5.4  Laminating, or Joining Face-to-Face</H2>
<p>
The verb <TT>,:</TT> (comma colon) is called "Laminate".  In the expression <TT>(x ,: y)</TT>, if <TT>x</TT> and <TT>y</TT> 
are, say,  two similar tables, then we can imagine the result as one table laid on top of the other to  
form a 3-dimensional array.  
Thus the arguments are joined along a new dimension, always of length 2.   
The result has two items, of which the first is <TT>x</TT> and the second is <TT>y</TT>.  
This means that the new dimension is the first. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>a</TT></TD> 
<TD><TT>b</TT></TD> 
<TD><TT>a ,: b</TT></TD> 
<TD><TT>A</TT></TD> 
<TD><TT>B</TT></TD> 
<TD><TT>A ,: B</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>pqr</TD> 
<TD><PRE>uvw</TD> 
<TD><PRE>pqr 
uvw</TD> 
<TD><PRE>ABC 
DEF</TD> 
<TD><PRE>UVW 
XYZ</TD> 
<TD><PRE>ABC 
DEF 
 
UVW 
XYZ</TD> 
</PRE></TABLE> 
<H2>5.5  Linking</H2>
<p>
The verb ; (semicolon) is called "Link".  It is  convenient for building lists of boxes. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>'good' ; 'morning'</TT></TD> 
<TD><TT>5 ; 12 ; 1995</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+----+-------+ 
|good|morning| 
+----+-------+</TD> 
<TD><PRE>+-+--+----+ 
|5|12|1995| 
+-+--+----+</TD> 
</PRE></TABLE> 
<p>
Notice how the example of <TT>5;12;1995</TT> shows that <TT>(x;y)</TT> is not invariably  
just <TT>(&lt; x),(&lt; y)</TT> . 
Since "Link" is intended for building lists of boxes, it recognises when its right argument is  
already a list of boxes.  If we define a verb which does produce <TT>(&lt; x),(&lt; y)</TT> 
<PRE>
   foo =: 4 : '(&lt; x.) , (&lt; y.)'
</PRE>
<p>
we can compare these two: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>1 ; 2 ; 3</TT></TD> 
<TD><TT>1 foo 2 foo 3</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+-+-+-+ 
|1|2|3| 
+-+-+-+</TD> 
<TD><PRE>+-+-----+ 
|1|+-+-+| 
| ||2|3|| 
| |+-+-+| 
+-+-----+</TD> 
</PRE></TABLE> 
<H2>5.6  Unbuilding Arrays</H2>
<p>
We have looked at four dyadic verbs: "Append" <TT>(,)</TT>,  "Stitch" <TT>(,.)</TT>,  "Laminate" <TT>(,:)</TT> and "Link" <TT>(;)</TT>. 
Each of these has a monadic case, which we now look at. 
<H3>5.6.1  Razing</H3>
<p>
Monadic <TT>;</TT> is called "Raze". It unboxes elements of the argument and assembles them into a list. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>B =: 2 2 $ 1;2;3;4</TT></TD> 
<TD><TT>; B</TT></TD> 
<TD><TT>$ ; B</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+-+-+ 
|1|2| 
+-+-+ 
|3|4| 
+-+-+</TD> 
<TD><PRE>1 2 3 4</TD> 
<TD><PRE>4</TD> 
</PRE></TABLE> 
<H3>5.6.2  Ravelling</H3>
<p>
Monadic <TT>,</TT> is called "Ravel". It assembles elements of the argument into a list. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>B</TT></TD> 
<TD><TT>, B</TT></TD> 
<TD><TT> $ , B</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+-+-+ 
|1|2| 
+-+-+ 
|3|4| 
+-+-+</TD> 
<TD><PRE>+-+-+-+-+ 
|1|2|3|4| 
+-+-+-+-+</TD> 
<TD><PRE>4</TD> 
</PRE></TABLE> 
<H3>5.6.3  Ravelling Items</H3>
<p>
Monadic <TT>,.</TT> is called "Ravel Items". It separately ravels each item of the argument to form a table.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>k =: 2 2 3 $ i. 12</TT></TD> 
<TD><TT>,. k</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>0  1  2 
3  4  5 
 
6  7  8 
9 10 11</TD> 
<TD><PRE>0 1 2 3  4  5 
6 7 8 9 10 11</TD> 
</PRE></TABLE> 
<p>
"Ravel Items" is useful for making a 1-column table out of a list.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>b   </TT></TD> 
<TD><TT>,. b</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>uvw</TD> 
<TD><PRE>u 
v 
w</TD> 
</PRE></TABLE> 
<H3>5.6.4  Itemizing</H3>
<p>
Monadic <TT>,:</TT> makes a 1-item array out of any array, by adding a leading dimension of <TT>1</TT>. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A </TT></TD> 
<TD><TT>,: A</TT></TD> 
<TD><TT>$ ,: A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>ABC 
DEF</TD> 
<TD><PRE>ABC 
DEF</TD> 
<TD><PRE>1 2 3</TD> 
</PRE></TABLE> 
<H2>5.7  Arrays Large and Small</H2>
<p>
For small arrays, where the contents can be listed on a single line, there are alternatives to using <TT>$</TT>,  
which avoid the need to give the dimensions explicitly.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT> > 1 2 ; 3 4 ; 5 6</TT></TD> 
<TD><TT> 1 2 , 3 4 ,: 5 6</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 2 
3 4 
5 6</TD> 
<TD><PRE>1 2 
3 4 
5 6</TD> 
</PRE></TABLE> 
<p>
To build large tables, a convenient method is as follows. 
First, here is a "utility" verb  
(that is, a verb which is useful for present purposes, 
but we don't need to study its definition now.) 
<PRE>
   ArrayMaker =: ". ;. _2
   
</PRE>
<p>
The purpose of <TT>ArrayMaker</TT> is to build a numeric table row by row from the lines of a  
script. 
<PRE>
   table =: ArrayMaker 0 : 0
1 2 3
4 5 6
7 8 9
)
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>table</TT></TD> 
<TD><TT>$ table</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 2 3 
4 5 6 
7 8 9</TD> 
<TD><PRE>3 3</TD> 
</PRE></TABLE> 
<p>
(See  <A HREF="17.htm">Chapter 17</A> for an explanation of how <TT>ArrayMaker</TT> works). 
Arrays of boxes can also be entered from a script in the same way: 
<PRE>
   X =:  ArrayMaker  0 : 0
'hello' ; 1 2 3 ; 8
'Waldo' ; 4 5 6 ; 9
)
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>X</TT></TD> 
<TD><TT>$ X</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+-----+-----+-+ 
|hello|1 2 3|8| 
+-----+-----+-+ 
|Waldo|4 5 6|9| 
+-----+-----+-+</TD> 
<TD><PRE>2 3</TD> 
</PRE></TABLE> 
<p>
We have reached the end of Chapter 5. 
  </tr> </table>

<HR> 
<p ALIGN=LEFT>
<A HREF="06.htm"> NEXT </A> <BR>
<A HREF="book.htm#toc"> Table of Contents </A>
</p> 

<HR>
<p ALIGN=CENTER> <FONT SIZE=-2>Copyright &copy; Roger Stokes 2000. 
This material may be freely reproduced,
provided that this copyright notice and provision is also reproduced.
</p>
 
<p ALIGN=CENTER> last updated 17Mar00</p>
</BODY>
</HTML>

