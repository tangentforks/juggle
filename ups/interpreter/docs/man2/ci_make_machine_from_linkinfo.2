.TH CI_COMPILE 2 "April 11, 1999" "UPS 3.x" "C Interpreter API"
.SH NAME
ci_make_machine_from_linkinfo - Build a Virtual Machine from byte-code.
.SH SYNOPSIS
.B #include <mtrprog/ifdefs.h>
.br
.B #include <local/ukcprog.h>
.br
.B #include <ups.h>
.br
.B #include <symtab.h>
.br
.B #include <ci.h>
.br
.B #include <xc_opcodes.h>
.br
.B #include <xc_machine.h>
.br
.B #include <xc_builtins.h>
.br
.B #include <cc.h>
.sp
\fBmachine_t *
.br
ci_make_machine_from_linkinfo(\fIli\fB, \fIentry_name\fB, \fIstack_size\fB, 
\fIgetaddr\fB, \fIget_regaddr_proc\fB, \fIget_regaddr_proc_arg\fB, 
\fIerrfunc\fB)
linkinfo_t *\fIli\fB;
.br
const char *\fIentry_name\fB;
.br
unsigned \fIstack_size\fB;
.br
ci_getaddrproc_t \fIgetaddr\fB;
.br
ci_get_regaddr_proc_t \fIget_regaddr_proc\fB;
.br
char *\fIget_regaddr_proc_arg\fB;
.br
ci_report_error_func_t \fIerrfunc\fB;
.sp
.fi
.SH DESCRIPTION
This function builds a Virtual Machine from the byte-code. 
.PP
.I li 
must point to generated byte-code (returned by 
.B ci_compile()
). 
.PP
.I entry_name 
is optional; it can be set to the name of the function that you would 
like to execute as the startup function. For example, if set to "main",
the 
.B main() 
function within the byte-code will be executed. If set to 
.B NULL
, the first function in the byte-code is assumed to be the startup 
function. 
.PP
.I stack_size 
is optional; if set to 0, the default stack_size 
is used (10240 stack words). 
.PP
.I getaddr 
is required. It is used by the interpreter to determine the type of
an external name.
.PP
.I get_regaddr_proc 
is optional; set it to 
.BR NULL . 
I do not know the purpose of this argument.
.PP
Ditto for 
.IR get_regaddr_proc_arg . 
.PP
.I errfunc 
should point to an error reporting function.
.PP
.SH SEE ALSO
.BR ci_compile (2), 
.br
.BR ci_free_machine (2), 
.br
.BR ci_reset_machine (2), 
.br
.BR ci_initialise_machine (2),
.br
.BR ci_execute_machine (2)
