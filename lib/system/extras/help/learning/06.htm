<HTML>
<HEAD>
<TITLE>Ch 6: Indexing</TITLE>

<STYLE TYPE="text/css">
<!--
TT  {font-size: 11pt; COLOR: BLUE}
PRE {font-size: 11pt; COLOR: BLUE}
-->
</STYLE>

</HEAD>

<BODY BGCOLOR=WHITE>

<table border="0" cellpadding="5" cellspacing="0"  width="100%">
 <tr> <td valign="top" width="17%"> <p> </td>
      <td valign="top" width="83%"> 
<H1>Chapter 6: Indexing</H1>
<p>
Indexing is the name given to selecting of elements of arrays by position.  
This topic  
includes selecting elements, rearranging selected elements to form new arrays,  
and amending, or updating, selected elements of arrays.  
<H2>6.1  Selecting</H2>
<p>
The verb <TT>{</TT> (left-brace) is called "From".  The expression <TT>(x { y)</TT>  
selects elements from <TT>y</TT> according to positions given by <TT>x</TT>.  For example, recall  
from Chapter 2 that if <TT>L</TT> is a list, then the positions of items  
of <TT>L</TT> are numbered 0 1 and so on.  The expression <TT>(0 { L)</TT> gives the value of the first  
item of <TT>L</TT> and <TT>1 { L</TT> gives the second item.    
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>L =: 'abcdef'</TT></TD> 
<TD><TT> 0 { L</TT></TD> 
<TD><TT> 1 { L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcdef</TD> 
<TD><PRE>a</TD> 
<TD><PRE>b</TD> 
</PRE></TABLE> 
<p>
The left argument of <TT>{</TT> is called the "index". 
<H3>6.1.1  Common Patterns of Selection.</H3>
<p>
Several items may be selected together:   
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>L </TT></TD> 
<TD><TT>0 2 4 { L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcdef</TD> 
<TD><PRE>ace</TD> 
</PRE></TABLE> 
<p>
Items selected from <TT>L</TT> may be replicated and re-ordered: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>L </TT></TD> 
<TD><TT>5 4 4 3 { L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcdef</TD> 
<TD><PRE>feed</TD> 
</PRE></TABLE> 
<p>
An index value may be negative: a value of <TT>_1</TT> selects the last item, <TT>_2</TT> selects the  
next-to-last item and so on. Positive and negative indices may be mixed. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>L </TT></TD> 
<TD><TT> _1 { L</TT></TD> 
<TD><TT> _2 1 { L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcdef</TD> 
<TD><PRE>f</TD> 
<TD><PRE>eb</TD> 
</PRE></TABLE> 
<p>
A single element of a table at, say, row 1 column 2 
is selected with an index <TT>(&lt; 1 ; 2)</TT>. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>T =: 3 3 $ 'abcdefghi'</TT></TD> 
<TD><TT> (&lt; 1 ; 2) { T</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def 
ghi</TD> 
<TD><PRE>f</TD> 
</PRE></TABLE> 
<p>
We can select from a table all elements in specified rows and columns, to produce a  
smaller table (called a subarray).  To select a subarray consisting of, for example rows  
<TT>1</TT> and <TT>2</TT> and columns <TT>0</TT> and <TT>1</TT>, we use an index <TT>(&lt; 1 2; 0 1)</TT> 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>T</TT></TD> 
<TD><TT>(&lt; 1 2;0 1) { T</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def 
ghi</TD> 
<TD><PRE>de 
gh</TD> 
</PRE></TABLE> 
<p>
A complete row or rows may be selected from a table. Recall that a table is a list of items, each  
item being a row. Thus selecting rows from tables is just like selecting items from lists.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>T </TT></TD> 
<TD><TT>1 { T</TT></TD> 
<TD><TT>2 1 { T</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def 
ghi</TD> 
<TD><PRE>def</TD> 
<TD><PRE>ghi 
def</TD> 
</PRE></TABLE> 
<p>
To select a complete column or columns, 
a straightforward way is 
to select all the rows: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>T </TT></TD> 
<TD><TT>(&lt; 0 1 2 ; 1 ){ T</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def 
ghi</TD> 
<TD><PRE>beh</TD> 
</PRE></TABLE> 
<p>
but there are other possibilities: see below. 
<H2>6.2  General Treatment of Selection</H2>
<p>
It will help to have some terminology.  In general we will have an n-dimensional array,  
but consider a 3-dimensional array.  A single element is picked out by giving a plane- 
number, a row-number and a column-number.  We say that the planes are laid out in  
order along the first axis, and similarly the rows along the second axis, and  
the columns along the third.  
<p>
There is no special notation for indexing; rather the left argument of <TT>{</TT> is  
a data structure which expresses, or encodes, selections and  
rearrangements. This data structure can be built in any way convenient. What follows  
is an explanation of how to build it. 
<H3>6.2.1  Independent Selections</H3>
<p>
The general expression for indexing is of the form <TT>index { array</TT>. Here <TT>index</TT> 
is an array of scalars. Each scalar in <TT>index</TT> gives rise to a separate 
independent selection, and the results are assembled together.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>L </TT></TD> 
<TD><TT> 0 1 { L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcdef</TD> 
<TD><PRE>ab</TD> 
</PRE></TABLE> 
<H3>6.2.2  Shape of Index</H3>
<p>
The shape of the results depends on the shape of <TT>index</TT>.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>L</TT></TD> 
<TD><TT>index =: 2 2 $ 2 0 3 1</TT></TD> 
<TD><TT>index { L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcdef</TD> 
<TD><PRE>2 0 
3 1</TD> 
<TD><PRE>ca 
db</TD> 
</PRE></TABLE> 
<p>
The indices must lie within the range <TT>-#L</TT> to <TT>(#L)-1</TT>: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT> L</TT></TD> 
<TD><TT>#L</TT></TD> 
<TD><TT>_7 { L</TT></TD> 
<TD><TT>6 { L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcdef</TD> 
<TD><PRE>6</TD> 
<TD><PRE>error</TD> 
<TD><PRE>error</TD> 
</PRE></TABLE> 
<H3>6.2.3  Scalars</H3>
<p>
Each scalar in <TT>index</TT> is either a single number or a box (and of course if one is a box, all are.) 
If the scalar is single number it selects an item from <TT>array</TT>.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A =: 2 3 $ 'abcdef'</TT></TD> 
<TD><TT>1 { A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>def</TD> 
</PRE></TABLE> 
<p>
If the scalar in <TT>index</TT> is a box however then it contains a list of selectors which are applied to successive axes. 
To show where a box is used for this purpose, we can use the name <TT>SuAx</TT>, say, for the box function. 
<PRE>
   SuAx =: &lt;
</PRE>
<p>
The following example selects from <TT>A</TT> the element at row 1, column 0.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT>(SuAx 1 0) { A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>d</TD> 
</PRE></TABLE> 
<H3>6.2.4  Selections on One Axis</H3>
<p>
In a list of selectors for successive axes, of the form <TT>(SuAx p , r, c)</TT> say, 
each of <TT>p</TT>, <TT>r</TT> and <TT>c</TT> is a scalar.  
This scalar is either a number or a box (and if one is boxed, all are). 
A number selects one thing on its axis: one plane, row or column as appropriate, as in the last example. 
<p>
However, if the selector is a box it contains a list of selections all applicable to the same 
axis. To show where a box is used for this purpose we can use the names <TT>Sel</TT>, say, for the box function. 
<PRE>
   Sel =: &lt;
</PRE>
<p>
For example, to select from <TT>A</TT> elements at row 1, columns 0 2: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT>(SuAx (Sel 1), (Sel 0 2)) { A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>df</TD> 
</PRE></TABLE> 
<H3>6.2.5  Excluding Things</H3>
<p>
Instead of selecting things on a particular axis, we can exclude things, by supplying a list of 
thing-numbers enclosed in yet another level of boxing. 
To show where a box is used for this purpose we can use the name <TT>Excl</TT>, say, for the box function. 
<PRE>
   Excl =: &lt;
</PRE>
<p>
For example, to select from <TT>A</TT> elements at row 0, all columns excluding column 1: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT>(SuAx (Sel 0), (Sel (Excl 1))) { A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>ac</TD> 
</PRE></TABLE> 
<p>
We can select all things on a particular axis by excluding nothing, that is, giving an empty 
list <TT>(0$0)</TT> as a list of thing-numbers to exclude. 
For example, to select from <TT>A</TT> elements at row 1, all columns: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT>(SuAx (Sel 1),(Sel (Excl 0$0))) { A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>def</TD> 
</PRE></TABLE> 
<H3>6.2.6  Simplifications</H3>
<p>
The expression <TT>(Excl 0$0)</TT> denotes a boxed empty 
list. There is a built-in J abbreviation for this, 
namely <TT>(a:)</TT> (letter-a colon), which in this context we can think of as meaning "all". 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT>(SuAx (Sel 1),(Sel a:)) { A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>def</TD> 
</PRE></TABLE> 
<p>
If in any index of the form <TT>(SuAx p,q,..., z)</TT>, 
 the last selector <TT>z</TT> is the "all" form,  
<TT>(Sel (Excl 0$0))</TT> or <TT>(Sel a:)</TT>, 
 then it can be omitted. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT>(SuAx (Sel 1),(Sel a:)) {A</TT></TD> 
<TD><TT>(SuAx (Sel 1)) {A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>def</TD> 
<TD><PRE>def</TD> 
</PRE></TABLE> 
<p>
If in any index of the form  
<TT>(SuAx (Sel p),(Sel q),...)</TT>, the "all" form is entirely absent, 
then the index can be abbreviated to <TT>(SuAx p;q;...)</TT>. For example, to select elements at 
row 1, columns 0 and 2: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT>(SuAx (Sel 1),(Sel 0 2)) {A</TT></TD> 
<TD><TT>(SuAx 1;0 2) {A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>df</TD> 
<TD><PRE>df</TD> 
</PRE></TABLE> 
<p>
Finally, as we have already seen, if selecting only one thing on each axis, a simple unboxed list is sufficient.  
For example to select  the element at row 1, column 2: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A </TT></TD> 
<TD><TT>(SuAx 1;2) { A</TT></TD> 
<TD><TT>(SuAx 1 2) { A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>f</TD> 
<TD><PRE>f</TD> 
</PRE></TABLE> 
<H3>6.2.7  Shape of the Result</H3>
<p>
Suppose that <TT>R =: ... { A</TT>. We can picture <TT>R</TT> as  
produced by removing some things along each axis of <TT>A</TT>. 
Hence we would expect <TT>R</TT> to be an array of the same rank as  
<TT>A</TT>: if <TT>A</TT> is 3-dimensional, then so is <TT>R</TT>. This is true in general, except that any axis of <TT>R</TT> which is  
of length 1 will disappear. In the following a scalar <TT>R</TT> is produced from a 2-dimensional <TT>A</TT>:  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A </TT></TD> 
<TD><TT>R =: (&lt; 0;0) { A</TT></TD> 
<TD><TT>$ R</TT></TD> 
<TD><TT># $ R</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>a</TD> 
<TD><PRE></TD> 
<TD><PRE>0</TD> 
</PRE></TABLE> 
<H2>6.3  Amending (or Updating)  Arrays</H2>
<p>
Sometimes we need to compute an array which is the same as an existing array except  
for new values at a comparatively small number of positions. We may speak of  
'updating' or 'amending' an array at selected positions.  The J function for amending  
arrays is <TT>}</TT> (right brace, called "Amend").  
<H3>6.3.1  Amending with an Index</H3>
<p>
To amend an array we need three things: 
<p>
   the original array 
<p>
   a specification of the position(s) at which the original is to be amended. This can be  
an index exactly like the index we have seen above for selection with <TT>{</TT>. 
<p>
   new values to replace existing elements at specified positions. 
<p>
Consequently the J expression to perform an amendment may have the general form: 
<TT>newvalues index }  original</TT>. For example: 
 to amend list <TT>L</TT> to replace the first item (at index <TT>0</TT>) with '*': 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>L</TT></TD> 
<TD><TT>new=:'*'</TT></TD> 
<TD><TT>index=:0</TT></TD> 
<TD><TT>new index } L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcdef</TD> 
<TD><PRE>*</TD> 
<TD><PRE>0</TD> 
<TD><PRE>*bcdef</TD> 
</PRE></TABLE> 
<p>
<TT>}</TT> is an adverb, which  
takes <TT>index</TT> as its argument to yield the dyading amending verb <TT>(index })</TT>.  
<PRE>
   ReplaceFirst =: 0 }
   '*' ReplaceFirst L
*bcdef
</PRE>
<p>
<TT>(index })</TT> is a verb like any other, dyadic and yielding a value in the usual way.  
Therefore to change an array by amending needs the whole of the result to be  
reassigned to the old name.  Thus amendment often takes place on the pattern: 
<PRE>
          A  =:  new index } A  
</PRE>
<p>
The J system ensures that this is an efficient computation with no 
unnecessary movement of data. 
<p>
To amend a table at row 1 column 2, for example: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>A</TT></TD> 
<TD><TT> '*' (&lt; 1 2) } A</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abc 
def</TD> 
<TD><PRE>abc 
de*</TD> 
</PRE></TABLE> 
<p>
To amend multiple elements, a list of new values can be supplied, and they are taken  
in turn to replace a list of values selected by an index 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT> L</TT></TD> 
<TD><TT> '*#' 1 2 } L</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>abcdef</TD> 
<TD><PRE>a*#def</TD> 
</PRE></TABLE> 
<H3>6.3.2  Amending with a Verb</H3>
<p>
Suppose that <TT>y</TT> is a list of numbers, and we wish to amend it so that all numbers exceeding 
a given value <TT>x</TT> are replaced by <TT>x</TT>.  
(For the sake of this 
example, we here disregard the built-in J verb  
 <TT>(&lt;.)</TT> for this function.) 
<p>
The indices at which <TT>y</TT> is to be amended must  
be computed from <TT>x</TT> and <TT>y</TT>.   
<p>
Here is a function <TT>f</TT> to compute the indices: 
<PRE>
   f =: 4 : '(y. > x.) # (i. # y.)'
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>x=:100</TT></TD> 
<TD><TT>y=:98 102 101 99</TT></TD> 
<TD><TT>y > x</TT></TD> 
<TD><TT>x f y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>100</TD> 
<TD><PRE>98 102 101 99</TD> 
<TD><PRE>0 1 1 0</TD> 
<TD><PRE>1 2</TD> 
</PRE></TABLE> 
<p>
The amending is done, in the way we have seen above, 
 by supplying indices of <TT>(x f y)</TT>: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y</TT></TD> 
<TD><TT>x (x f y) } y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>98 102 101 99</TD> 
<TD><PRE>98 100 100 99</TD> 
</PRE></TABLE> 
<p>
The "Amend" adverb <TT>}</TT> allows the expression  
<TT>(x (x f y) } y)</TT> 
to be abbreviated as <TT>(x f } y)</TT>.  
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>x (x f y) } y</TT></TD> 
<TD><TT>x f } y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>98 100 100 99</TD> 
<TD><PRE>98 100 100 99</TD> 
</PRE></TABLE> 
<p>
Since <TT>}</TT> is an adverb, it can accept 
as argument the indices <TT>(x f y)</TT> or the verb <TT>f</TT>. 
<PRE>
   cap =: f }
   
   10 cap 8 9 10 11
8 9 10 10
</PRE>
<p>
Note that if verb <TT>f</TT> is to be supplied as argument 
to adverb <TT>}</TT>, then <TT>f</TT> must be a dyad, although 
it may ignore <TT>x</TT> or <TT>y</TT>.  
<H3>6.3.3  Linear Indices</H3>
<p>
We have just looked at amending lists with a verb. The purpose of the verb is to find  
the places at which to amend, that is, to compute from the values in a list the indices at  
which to amend. With a table rather than a list, the indices would have to be  2- 
dimensional, and the task of the verb in constructing the indices would be  
correspondingly more difficult.   
It would be easier to flatten a table into a linear list,   
amend it as a list, and rebuild the list into a 
 table again.   
<p>
For example, suppose we have a table: 
<PRE>
   M =: 2 2 $ 3 12 11 4
</PRE>
<p>
Then, using our index-finding verb <TT>f</TT>,  
the flattening, amending and rebuilding is shown by: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>M</TT></TD> 
<TD><TT>LL =: ,M</TT></TD> 
<TD><TT>Z =: 10 f } LL</TT></TD> 
<TD><TT> ($M) $ Z</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE> 3 12 
11  4</TD> 
<TD><PRE>3 12 11 4</TD> 
<TD><PRE>3 10 10 4</TD> 
<TD><PRE> 3 10 
10  4</TD> 
</PRE></TABLE> 
<p>
However, there is a better way. 
First note that our index-finding verb <TT>f</TT> takes as argument, not <TT>M</TT> 
but <TT>(LL =: , M)</TT>. Thus information about the original shape of <TT>M</TT> 
is not available to the index-finder <TT>f</TT>.  
In this example, this does not matter, but in general 
we may want the index-finding to depend upon both the shape and the  
values in <TT>M</TT>. It would be better 
if <TT>f</TT> took the whole of <TT>M</TT> as argument. 
In this case <TT>f</TT> must do its own flattening. 
Thus we redefine <TT>f</TT>: 
<PRE>
   f =: 4 : 0
y. =. , y.
(y. > x.) # (i. # y.)
)
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>M</TT></TD> 
<TD><TT>10 f M</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE> 3 12 
11  4</TD> 
<TD><PRE>1 2</TD> 
</PRE></TABLE> 
<p>
Now the index finder <TT>f</TT> takes an array as  
argument, 
and delivers indices into the flattened array, so-called "linear indices". 
The amending process, with this new <TT>f</TT>, is shown by: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>M</TT></TD> 
<TD><TT>($M) $ 10 (10 f M) } (, M)</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE> 3 12 
11  4</TD> 
<TD><PRE> 3 10 
10  4</TD> 
</PRE></TABLE> 
<p>
Finally, provided <TT>f</TT> delivers linear indices, then <TT>(})</TT> allows 
the last expression to be abbreviated as: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>M</TT></TD> 
<TD><TT>10 f } M</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE> 3 12 
11  4</TD> 
<TD><PRE> 3 10 
10  4</TD> 
</PRE></TABLE> 
<H2>6.4  Tree Indexing</H2>
<p>
So far we have looked at indexing into rectangular arrays. 
There is also a form of indexing into boxed structures, 
which we can picture as "trees" having branches and leaves. 
For example: 
<PRE>
   branch =: &lt;
   leaf   =: &lt;
   
   branch0 =: branch (leaf 'J S'),(leaf 'Bach')
   branch1 =: branch (leaf 1), (leaf 2), (leaf 1777)
   tree    =: branch0,branch1
   tree
+----------+----------+
|+---+----+|+-+-+----+|
||J S|Bach|||1|2|1777||
|+---+----+|+-+-+----+|
+----------+----------+
</PRE>
<p>
Then data can be fetched from the tree  
by specifying a path from the root. The path is  
a sequence of choices, 
given as left argument to the verb <TT>{::</TT>  
(left-brace colon colon,called "Fetch") 
The path <TT>0</TT> will fetch the first branch, while 
the path <TT>0;1</TT> fetches the second leaf of the first branch: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>0 {:: tree</TT></TD> 
<TD><TT>(0;1) {:: tree</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+---+----+ 
|J S|Bach| 
+---+----+</TD> 
<TD><PRE>Bach</TD> 
</PRE></TABLE> 
<p>
The monadic form <TT>{:: tree</TT> is called the  
"Map" of <TT>tree</TT>. 
it has the same boxed structure as <TT>tree</TT> and  
shows the path to each leaf. 
<PRE>
   {:: tree
+-------------+-------------------+
|+-----+-----+|+-----+-----+-----+|
||+-+-+|+-+-+|||+-+-+|+-+-+|+-+-+||
|||0|0|||0|1|||||1|0|||1|1|||1|2|||
||+-+-+|+-+-+|||+-+-+|+-+-+|+-+-+||
|+-----+-----+|+-----+-----+-----+|
+-------------+-------------------+
</PRE>
<p>
This is the end of Chapter 6. 
  </tr> </table>

<HR> 

<p ALIGN=LEFT>
<A HREF="07.htm"> NEXT </A> <BR>
<A HREF="book.htm#toc"> Table of Contents </A>
</p> 

<HR>
<p><FONT SIZE=-2>Copyright &copy; Roger Stokes 1999. 
This material may be freely reproduced,
provided that this copyright notice and provision is also reproduced.
</p>
 
<p ALIGN=CENTER> last updated 10 September 1999</p>
</BODY>
</HTML>
