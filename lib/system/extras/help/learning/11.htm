<HTML>
<HEAD>
<TITLE>Ch 11: Explicit Verbs</TITLE>

<STYLE TYPE="text/css">
<!--
TT  {font-size: 11pt; COLOR: BLUE}
PRE {font-size: 11pt; COLOR: BLUE}
-->
</STYLE>

</HEAD>

<BODY BGCOLOR=WHITE>

<table border="0" cellpadding="5" cellspacing="0"  width="100%">
 <tr> <td valign="top" width="17%"> <p> </td>
      <td valign="top" width="83%"> 
<H1>Chapter 11: Explicit Verbs</H1>
<p>
This chapter continues from  <A HREF="04.htm">Chapter 04</A> the theme  
of the explicit definition of verbs. 
<H2>11.1  The Colon Conjunction</H2>
<p>
Recall from  <A HREF="04.htm">Chapter 04</A> the example of an explicit monad: the Fahrenheit-to-Celsius converter: 
<PRE>
   ftoc =: 3 : 0
z =. y. - 32
z * 5 % 9
)
</PRE>
<p>
The general scheme for an explicitly-defined function is to provide  
two arguments for the colon-conjunction,  
in the form 
<p>
      <TT>type : body</TT> 
<p>
The type is a number: type-3 functions are monadic verbs or ambivalent verbs, while type-4 functions are 
strictly dyadic verbs (that is, with no monadic case). 
Rather than numbers, some people may prefer to use 
 conventional pre-assigned names.  
The pre-assigned names are: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>noun</TT></TD> 
<TD><TT>adverb</TT></TD> 
<TD><TT>conjunction</TT></TD> 
<TD><TT>verb</TT></TD> 
<TD><TT>monad</TT></TD> 
<TD><TT>dyad</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>0</TD> 
<TD><PRE>1</TD> 
<TD><PRE>2</TD> 
<TD><PRE>3</TD> 
<TD><PRE>3</TD> 
<TD><PRE>4</TD> 
</PRE></TABLE> 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>def</TT></TD> 
<TD><TT>define</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+-+ 
|:| 
+-+</TD> 
<TD><PRE>+-+-+ 
|:|0| 
+-+-+</TD> 
</PRE></TABLE> 
<p>
Thus the <TT>ftoc</TT> example could be also written as:  
<PRE>
   ftoc1 =: verb define
z =. y. - 32
z * 5 % 9
)
</PRE>
<p>
The complete set of types is as follows: 
<p>
0  script (as in 0 : 0) 
<p>
1  explicit adverb 
<p>
2  explicit conjunction 
<p>
3  explicit verb (monad or ambivalent) 
<p>
4  explicit verb (dyad) 
<p>
11 generated tacit adverb  
<p>
12 generated tacit conjunction  
<p>
13 generated tacit verb 
<p>
14 generated tacit dyad 
<p>
In this chapter, we will be concerned only with types 3 and 4. 
For details of types 1 and 2 see Chapter 13 and 
for types 11-14 see Chapter 15. 
<H3>11.1.1  Body Styles</H3>
<p>
The body of an explicit definition consists of one or more lines of text.  
There are several ways to provide the body.  
The example above, <TT>ftoc</TT>, shows what is often most convenient: lines introduced by a right argument of zero for the 
colon operator.  A variation is where the body has only one line.  
Here the body is written as a string:  
<PRE>
   ftoc2 =: 3 : '(y. - 32) * 5 % 9'
</PRE>
<p>
Another variation allows a multi-line function to be written compactly by embedding line-feeds.  
<TT>LF</TT> is predefined to be the line-feed character.  
<PRE>
   ftoc3 =: 3 : ('z =: y. - 32', LF, 'z * 5 % 9')
   ftoc3
+-+-+------------+
|3|:|z =: y. - 32|
| | |z * 5 % 9   |
+-+-+------------+
</PRE>
<p>
Another variation uses a boxed list of lines: 
<PRE>
   ftoc4 =: 3 : ('z =. y. - 32' ; 'z * 5 % 9')
   ftoc4
+-+-+------------+
|3|:|z =. y. - 32|
| | |z * 5 % 9   |
+-+-+------------+
</PRE>
<p>
A character array is also possible. Notice that these are not variations of syntax, but rather alternative 
expressions for constructing a data-structure acceptable as the right-argument of the colon operator. 
<p>
An ambivalent function is presented by separating the monadic  
case from the dyadic with a line consisting of a solo colon. 
For example: 
<PRE>
   log =: 3 : 0
^. y.    NB. monad
:
x. ^. y. NB. dyad
)
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>log</TT></TD> 
<TD><TT>log 2.7182818</TT></TD> 
<TD><TT>10 log 100</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+-+-+------------------+ 
|3|:|^. y.    NB. monad| 
| | |:                 | 
| | |x. ^. y. NB. dyad | 
+-+-+------------------+</TD> 
<TD><PRE>1</TD> 
<TD><PRE>2</TD> 
</PRE></TABLE> 
<H2>11.2  Assignments</H2>
<p>
In this section we consider assignments,  
which are of significance in defining explicit functions. 
<H3>11.2.1  Local and Global Variables</H3>
<p>
Consider the example 
<PRE>
   foo =: 3 : 0
L =.  y.
G =:  y.
L
)
</PRE>
<p>
Here, the assignment of the form 
<p>
<TT>        L =. expression</TT> 
<p>
causes the value of <TT>expression</TT> to be assigned to a  
local variable named <TT>L</TT>. Saying that <TT>L</TT> is local 
means that <TT>L</TT> exists only while the function <TT>foo</TT> 
is executing, and furthermore this <TT>L</TT> is distinct from any 
other variable named <TT>L</TT>.  By contrast, the assignment of the form 
<p>
<TT>        G =: expression</TT> 
<p>
causes the value of <TT>expression</TT> to be assigned to a  
global variable named <TT>G</TT>. Saying that <TT>G</TT> is global 
means that the unique variable <TT>G</TT> exists 
independently, in its own right. 
<p>
To illustrate, we define two GLOBAL variables called 
<TT>L</TT> and <TT>G</TT>, then execute <TT>foo</TT> to show that the <TT>L</TT> mentioned in <TT>foo</TT> 
is not the same as global <TT>L</TT>, while the <TT>G</TT> mentioned in foo is the same 
as global G: 
<PRE>
   L =: 'old L'
   G =: 'old G'
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>foo</TT></TD> 
<TD><TT>foo 'new'</TT></TD> 
<TD><TT>L</TT></TD> 
<TD><TT>G</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+-+-+--------+ 
|3|:|L =.  y.| 
| | |G =:  y.| 
| | |L       | 
+-+-+--------+</TD> 
<TD><PRE>new</TD> 
<TD><PRE>old L</TD> 
<TD><PRE>new</TD> 
</PRE></TABLE> 
<H3>11.2.2  Local Functions</H3>
<p>
A local variable may be a noun, as we have seen, 
or it may be a locally defined function. 
A local function may be tacit or explicit,  as in the following  example 
<PRE>
   foo =: 3 : 0
Square  =. *:
Cube    =. 3 : 'y. * y. * y.'
Square y. + Cube y.
)
   
   foo 2
100
</PRE>
<p>
However, what we can't have is a local function defined by 
an inner script. Recall that a script 
is terminated by a solo right parenthesis, so we cannot have one script inside another. 
Instead, we could use an alternative form for the body of an inner  
function, such as  <TT>scale</TT> in the following example: 
<PRE>
   FTOC =: 3 : 0
   line1   =. 'k =. 5 % 9'
   line2   =. 'k * y.'
scale =. 3 : (line1 ; line2)  
scale y. - 32
)
   
   FTOC 212
100
</PRE>
<p>
One final point on the topic of inner functions. 
A local variable is either strictly local  
or strictly global. Consider the following: 
<PRE>
   K =: 'hello '
   
   zip =: 3 : 0
K =. 'goodbye '
zap =. 3 : 'K , y.'
zap y.
)
   
   zip 'George'
hello George
</PRE>
<p>
We see that there is a global <TT>K</TT> and a local <TT>K</TT>. The inner function  
<TT>zap</TT> uses the global <TT>K</TT> because the <TT>K</TT> which is local to  
<TT>zip</TT> is not local to <TT>zap</TT>. 
<H3>11.2.3  Multiple and Indirect Assignments</H3>
<p>
J provides a convenient means of unpacking a list by 
assigning 
different names to different items. 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>'day mo yr' =: 16 10 95</TT></TD> 
<TD><TT>day</TT></TD> 
<TD><TT>mo</TT></TD> 
<TD><TT>yr</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>16 10 95</TD> 
<TD><PRE>16</TD> 
<TD><PRE>10</TD> 
<TD><PRE>95</TD> 
</PRE></TABLE> 
<p>
Instead of a simple name to the left of the assignment, 
we have a string with names separated by spaces. 
<p>
A variation uses a boxed set of names: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>('day';'mo';'yr') =: 17 11 96</TT></TD> 
<TD><TT>day</TT></TD> 
<TD><TT>mo</TT></TD> 
<TD><TT>yr</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>17 11 96</TD> 
<TD><PRE>17</TD> 
<TD><PRE>11</TD> 
<TD><PRE>96</TD> 
</PRE></TABLE> 
<p>
The parentheses around the left hand of the  
assignment force evaluation as a set of names, to give 
what is called "indirect assignment". 
To illustrate: 
<PRE>
   N =: 'DAY';'MO';'YR'
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>(N) =: 18 12 97</TT></TD> 
<TD><TT>DAY</TT></TD> 
<TD><TT>MO</TT></TD> 
<TD><TT>YR</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>18 12 97</TD> 
<TD><PRE>18</TD> 
<TD><PRE>12</TD> 
<TD><PRE>97</TD> 
</PRE></TABLE> 
<p>
As a convenience, a mutiple assignment will automatically 
remove one layer of boxing from the right-hand side: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>(N) =: 19;'Jan';98</TT></TD> 
<TD><TT>DAY</TT></TD> 
<TD><TT>MO</TT></TD> 
<TD><TT>YR</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>+--+---+--+ 
|19|Jan|98| 
+--+---+--+</TD> 
<TD><PRE>19</TD> 
<TD><PRE>Jan</TD> 
<TD><PRE>98</TD> 
</PRE></TABLE> 
<H3>11.2.4  Unpacking the Arguments</H3>
<p>
Every J function takes exactly one or exactly two 
arguments - not zero and not more than two. 
This may appear to be a limitation but in fact is not. 
A collection of values can be 
packaged up into a list, or boxed list, to form in effect 
multiple arguments to the J function. 
However, the J function must unpack 
the values again. A convenient way 
to do this is with the multiple assignment. 
For example, the familiar formula to find the roots of a quadratic 
<TT>(a*x^2) +(b*x)+c</TT>, given the vector of 
coefficients <TT>a,b,c</TT> might be: 
<PRE>
   rq =: 3 : 0
'a b c' =: y.
((-b) (+,-) %: (b^2)-4*a*c) % (2*a)
)
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>rq 1 1 _6</TT></TD> 
<TD><TT>rq 1 ; 1 ; _6</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>2 _3</TD> 
<TD><PRE>2 _3</TD> 
</PRE></TABLE> 
<H2>11.3  Flow of Control</H2>
<p>
In an explicit definition, the sequence of execution of the lines is  
often the first line, then the second, and so on through to the last. The result of the whole 
function is the result computed by the last line to be executed. This sequence may 
be varied by the presence of CONTROL WORDS, such as <TT>if.</TT> or <TT>while.</TT> .  
<H3>11.3.1  if.</H3>
<p>
Here is an example of a function in which a choice is made 
about which lines to execute. The function classifies the temperature 
of porridge.    
<PRE>
   CTP =: 3 : 0
if.   y. > 80 
do.   'too hot' 
else. 'OK'
end.
)
   
   CTP 70
OK
</PRE>
<p>
This example shows the pattern: 
<p>
<TT>        if. T do. B1 else. B2 end.</TT> 
<p>
meaning: if the expression <TT>T</TT> evaluates to "true", then execute the  
expression <TT>B1</TT>, and otherwise 
execute the expression <TT>B2</TT>.  
<p>
More generally,  <TT>T</TT>, <TT>B1</TT> and <TT>B2</TT> may be what are called BLOCKS.   
A block is a sequence of zero, one, or more expressions,  
the sequence being surrounded  by control words.  
Thus in the example above, the block <TT>(y.> 80)</TT> is delimited by 
the control words <TT>if.</TT> and <TT>do.</TT>. 
Here is another example, to form the sum of a list, where the T-block and the B2-block 
each consist of a sequence. 
<PRE>
   sum =: 3 : 0
if.   length  =. # y.
      length  = 0
do.   0
else. first =. {. y.
      rest  =. }. y.
      first + sum rest
end.
)
   
   sum 1 2 3
6
</PRE>
<p>
Here we see that the value of the T-block (true or false) 
is the value of the last expression in the sequence, <TT>(length = 0)</TT> 
<p>
The expressions in a block may themselves be (inner) blocks, as shown by  
another function to classify the temperature of porridge: 
<PRE>
   ClaTePo =: 3 : 0

if. y. > 80  do.      'too hot'
else.
      if. y. &lt; 60 do. 'too cold'
      else.           'just right'
      end.
end.
)
   
   ClaTePo 70
just right
</PRE>
<p>
This example also shows that control-words 
serve to terminate J expressions 
just as end-of-line terminates J expressions. 
Hence control-words allow some freedom in  
laying out a definition  
for the most pleasing appearance. 
<p>
A neater variation of the last example is: 
<PRE>
   CLATEPO =: 3 : 0
if.     y. > 80 do. 'too hot'
elseif. y. &lt; 60 do. 'too cold'
elseif. 1       do. 'just right'
end.
)
   
   CLATEPO 70
just right
</PRE>
<p>
The second scheme for <TT>if.</TT> is: 
<PRE>
   if.     T1 do. B1 
   elseif. T2 do. B2 
    ... 
   elseif. Tn do. Bn 
   end. 
</PRE>
<p>
Notice that according to this scheme, if 
all of the tests <TT>T1</TT> ... <TT>Tn</TT> fail,  
then none of the blocks <TT>B1</TT> .. <TT>Bn</TT> will be executed. 
Consequently we may wish to make <TT>Tn</TT> a catch-all 
test, with the constant value 1, as in the example 
of <TT>CLATEPO</TT> above. 
<H3>11.3.2  while. and whilst.</H3>
<p>
In the general pattern 
<PRE>
while. T do. B end. 
</PRE>
<p>
the block <TT>B</TT> is executed repeatedly 
so long as block <TT>T</TT> evaluates to true. 
Here is an example, a version of the factorial function: 
<PRE>
   fact =: 3 : 0
r =. 1
while. y. > 1
do.    r  =. r * y.
       y. =. y. - 1
end.
r
)
   
   fact 5
120
</PRE>
<p>
The variation <TT>whilst. T do. B end.</TT> means 
<PRE>
B 
while. T do. B end. 
</PRE>
<p>
that is, block <TT>B</TT> is executed once,  and then  
repeatedly so long as block <TT>T</TT> is true. 
<H3>11.3.3  for</H3>
<p>
The pattern  
<p>
   <TT>for_a. A do. B. end.</TT> 
<p>
means: for each item <TT>a</TT> in array <TT>A</TT>,  
execute block <TT>B</TT>. 
Here <TT>a</TT> may be any name;  
the variable <TT>a</TT> takes on the value 
of each item of <TT>A</TT> in turn. 
For example,  to sum a list: 
<PRE>
   Sum =: 3 : 0
r =. 0
for_term. y. do.  r =. r+term end.
r
)
   
   Sum 1 2 3
6
</PRE>
<p>
In addition to the variable <TT>a</TT> for the value of an item,  
the variable <TT>a_index</TT> is available to give 
the index of the item. For example, this function numbers the items: 
<PRE>
   f3 =: 3 : 0
r =. 0 2 $ 0
for_item. y. do.  r =. r , (item_index; item) end.
r
)
   
   f3 'ab';'cdef';'gh'
+-+----+
|0|ab  |
+-+----+
|1|cdef|
+-+----+
|2|gh  |
+-+----+
</PRE>
<p>
Another variation is the pattern <TT>for. A. do. B end.</TT> 
which is similar except that the variables <TT>a</TT> and <TT>a_index</TT> are not available. 
<H3>11.3.4  try.</H3>
<p>
Here we look at a way of handling errors. 
The scheme is that: 
<p>
<TT>try. B1 catch. B2 end.</TT> 
<p>
means: execute block <TT>B1</TT>. If for any reason 
<TT>B1</TT> fails, then <TT>B1</TT> is abandoned and <TT>B2</TT> executed instead. 
If <TT>B1</TT> succeeds, then <TT>B2</TT> is not executed. 
The following example is a function which tests that the argument 
supplied is valid. 
<PRE>
   foo =: 3 : 0
try. *: y.  catch. 'argument must be numeric' end.
)
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>foo 2</TT></TD> 
<TD><TT>foo 'hello'</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>4</TD> 
<TD><PRE>argument must be numeric</TD> 
</PRE></TABLE> 
<H3>11.3.5  goto and label</H3>
<p>
Given any name,  such as <TT>qwerty</TT>, then two 
control-words may be constructed:  
<TT>label_qwerty.</TT> and <TT>goto_qwerty.</TT> . (Notice that both end with a dot). 
<p>
The meaning of <TT>label_qwerty.</TT> is that it 
 provides a name for 
a block which begins at the point where 
<TT>label_qwerty.</TT> occurs.  This block ends 
at the end of the whole explicit definition. 
The purpose of naming a block in this way is that  
<TT>goto_qwerty.</TT> means that the named block is to be executed next. 
Here is an example: yet another factorial function. 
<PRE>
   facto =: 3 : 0
r =. 1
label_again.
   if. y. &lt; 2 do. goto_done. end.
   r  =. r * y.
   y. =. y. - 1
   goto_again.
label_done.
r
)
   
   facto 5
120
</PRE>
<H3>11.3.6  break,  continue and return</H3>
<p>
to be supplied 
<p>
This is the end of Chapter 11. 
  </tr> </table>

<HR> 

<p ALIGN=LEFT>
<A HREF="12.htm"> NEXT </A> <BR>
<A HREF="book.htm#toc"> Table of Contents </A>
</p> 

<HR>
<p><FONT SIZE=-2>Copyright &copy; Roger Stokes 1999. 
This material may be freely reproduced,
provided that this copyright notice and provision is also reproduced.
</p>
 
<p ALIGN=CENTER> last updated 10 September 1999</p>
</BODY>
</HTML>
