<html>
<head>
<title>Explicit-to-tacit </title>
<LINK REL=stylesheet HREF="../jdoc.css" TYPE="text/css">
</head><body><!--top jump start--><a href="checkpoint_f.htm">&gt&gt;</a>&nbsp;
<a href="tacit_definition.htm">&lt&lt;</a>&nbsp;
<a href="../index/a.htm">Ndx</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../user/win_driver_cmd_ref_overview.htm">wd</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Primer<hr><!--top jump end-->


 

<TR valign="baseline"><TD><H1>Explicit-to-tacit translator</h1>	<TR><TD>

<P>There is a primitive which automatically converts one-line explicit definitions to an equivalent tacit definition. You can learn a lot about tacit programming by writing one line explicit definitions, converting them to tacit form, and studying the resulting tacit definition. </P>

<P>Let's do this with an explicit fahrenheit definition. A left argument of <TT>3</TT> to <TT>:</TT> creates an explicit definition. A left argument of <TT>13 </TT>to <TT>:</TT> creates a tacit definition.</P>

<PRE>   fx =:  3 : '32 + y. * 9 % 5'	NB.  3 explicit
   ft =: 13 : '32 + y. * 9 % 5'	NB. 13 tacit
</PRE>
<P>Use the View menu to select Linear Display.
</P>
<PRE>   ft
32"_ + ] * 1.8"_
</PRE>
<P>At first glance this is confusing as it introduces several new things at once. The first thing to do is to look at the boxed display. </P>

<P>Use the View menu to select the Box Display.
</P>
<PRE>   ft
+--------------------------+
¦+------+¦+¦+-------------+¦
¦¦32¦"¦_¦¦ ¦¦]¦*¦+-------+¦¦
¦+------+¦ ¦¦ ¦ ¦¦1.8¦"¦_¦¦¦
¦        ¦ ¦¦ ¦ ¦+-------+¦¦
¦        ¦ ¦+-------------+¦
+--------------------------+
</PRE>
<P>At the top level of boxing there are 3 boxes. This is a train with three elements and is in fact a fork. You can take this thing apart by giving names to the parts and looking at them separately.</P>

<P>The first element of the fork is the phrase <TT>32"_</TT> . Give this a name and experiment with it a bit as a monadic verb.</P>

<PRE>   left =: 32"_
   left 123
32

   left i.5
32
</PRE>
<P>Whatever you give left as an argument, it just returns <TT>32</TT>. You've seen the <TT>"</TT> conjunction before, but not with a constant left argument. Let's look this up in the J Dictionary. When you turn to the definition for rank you will notice that there are three pages of definitions, each with its own header. The three headings are:</P>

<PRE>	Rank	m " n
	Rank	u " n
	Assign rank	m " v	u " v	mv lv rv
</PRE>
<P>The different definitions are for the rank conjunction used with different types of arguments. In the headings <TT>m</TT> and <TT>n</TT> indicate noun arguments and <TT>u</TT> and <TT>v</TT> indicate verb arguments. Your earlier use of <TT>"</TT> involved a verb left argument and a noun right argument and is covered by the second definition. Both <TT>32 </TT>and <TT>_</TT> (infinity) are nouns so it is the first definition that is relevant.</P>

<P>Reading the definition for <TT>m " n</TT> makes it clear that the observations are correct. With a right rank of <TT>_</TT> , the derived verb applies to its entire right argument, and no matter what it is, it returns the left argument, which is <TT>32</TT>. </P>

<P>Let's look at the right element of the fork.
</P>
<PRE>   right =: ] * 1.8"_
   right 23
41.4

   right 10
18</PRE>

<P>Let's not worry about the details of the definition, but again, by observation, what the verb right does is to multiply its argument by <TT>1.8</TT> (which is <TT>9%5</TT>).</P>

<P>The final definition is a fork.
</P>
<PRE>   ff =: left + right
   ff 100
212

 
   ff 0
32
</PRE>
<P>The result of the fork, <TT>ff </TT>, does work. Let's look in more detail at the definition of the fork.</P>

<PRE>left + right	evaluates as	(left y) + (right y)
		  32     + (1.8 * y)
</PRE>
<P>Which is the Fahrenheit conversion!
</P>
<P>Compare your custom built tacit definition with the automatically translated one and note how different they are.</P>

<PRE>32&+@(1.8&*)
	vs
32"_ + ] * 1.8"_
</PRE>
<P>Tacit programming is very rich and varied and is tightly tied to adverbs and conjunctions such as bond, atop, and rank, and to trains such as hook and fork.</P>


</TD>
  </tr>
<TR><TD>
<!--bottom jump start--><hr><a href="checkpoint_f.htm">&gt&gt;</a>&nbsp;
<a href="tacit_definition.htm">&lt&lt;</a>&nbsp;
<a href="../index/a.htm">Ndx</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../user/win_driver_cmd_ref_overview.htm">wd</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Primer<!--bottom jump end--></td></tr></table></body>
</html>
