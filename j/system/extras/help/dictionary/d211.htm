<html>
<head><title>$. Sparse</title><html>
<head><link href="../jdoc.css" rel=stylesheet></head>
<body><!--top jump start--><a href="d212.htm">&gt&gt;</a>&nbsp;
<a href="d210.htm">&lt&lt;</a>&nbsp;
<a href="../index/a.htm">Ndx</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../user/win_driver_cmd_ref_overview.htm">wd</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Dictionary<hr><!--top jump end-->

<br>
<table width=100%><tr>
<td align=left   width=33%><b><font size=+2>Sparse</font></b></td>
<td align=center width=34%><font face="Courier New" size=+3>$. &nbsp;_ _ _</font></td>
<td align=right  width=33%><b><font size=+2>Sparse</font></b></td>
</tr></table>
<br>

<table width=100% border=0><tr>
<td valign=top width=49% bgcolor=#eeeeee>
<b><tt>$.y </tt></b>converts a dense array to sparse, and
conversely<b><tt> $.^:_1 y </tt></b>converts a sparse array to
dense.<br><br>

The identities<tt> f -: f&.$. </tt>and<tt> f -:
f&.($.^:_1) </tt>hold for any function<tt> f</tt> ,<tt> </tt>with
the possible exception of those (like overtake<tt> {.</tt>) which
use the sparse element as the fill.
<br>&nbsp;</td>

<td width=2%>&nbsp;</td>

<td valign=top width=49% bgcolor=#eeeeee>
<b><tt>0$.y </tt></b>applies<tt> $. </tt>or<tt> $.^:_1 </tt>as
appropriate; that is, converts a dense array to sparse and a
sparse array to dense.<br><br>

<b><tt>1$.sh;a;e </tt></b>produces a sparse array.<tt> sh </tt>specifies
the shape.<tt> a </tt>specifies the sparse axes; negative
indexing may be used.<tt> e </tt>specifies the "zero"
element, and its type determines the type of the array. The
argument may also be<tt> sh;a </tt>(<tt>e </tt>is assumed to be a
floating point<tt> 0</tt>) or just<tt> sh </tt>(<tt>a </tt>is
assumed to be<tt> i.#sh </tt>-- all axes are sparse -- and<tt> e </tt>a
floating point<tt> 0</tt>).<br><br>

<b><tt>2$.y </tt></b>gives the sparse axes (the<tt> a </tt>part);
<br>
<b><tt>(2;a)$.y </tt></b>(re-)specifies the sparse axes; <b><tt><br>
(2 1;a)$.y </tt></b>gives the number of bytes required for <tt>(2;a)$.y</tt>;
<b><tt><br>
(2&nbsp;2;a)$.y </tt></b>gives the number of items in the<tt> i </tt>part
or the<tt> x </tt>part for the specified sparse axes<tt> a </tt>(that
is,<tt> #4$.(2;a)$.y</tt>).<br><br>

<b><tt>3$.y </tt></b>gives the sparse element (the<tt> e </tt>part);
<b><tt>(3;e)$.y</tt></b><tt> </tt>respecifies the sparse element.<br><br>

<b><tt>4$.y </tt></b>gives the index matrix (the<tt> i </tt>part).<br><br>

<b><tt>5$.y </tt></b>gives the value array (the<tt> x </tt>part).<br><br>

<b><tt>6$.y </tt></b>gives the flag (the<tt> flag </tt>part).<br><br>

<b><tt>7$.y </tt></b>gives the number of non-sparse entries in
array<tt> y</tt>;<tt> </tt>that is,<tt> #4$.y </tt>or<tt> #5$.y</tt>.<br><br>

<b><tt>8$.y </tt></b>removes any completely "zero"
value cells and the corresponding rows in the index matrix.<br><br>

The inverse of<tt> n&$. </tt>is<tt> (-n)&$. </tt>.
<br>&nbsp;</td>
</tr></table><br>

The remainder of this text is divided into the following sections:
<a href="#introduction">Introduction</a>, 
<a href="#representation">Representation</a>,
<a href="#assertions">Assertions</a>,
<a href="#further examples">Further Examples</a>,
<a href="#sparse linear algebra">Sparse Linear Algebra</a>, and
<a href="#implementation status">Implementation Status</a>.<br><br>

<a name="introduction"></a><font size=+1><b>Introduction</b></font><br><br>

We describe a sparse array extension to J using a
representation that "does not store zeros". One new
verb<tt> $. </tt>is defined to
create and manipulate sparse arrays, and existing primitives are
extended to operate on such arrays. These ideas are illustrated
in following examples:<br><br>

<pre>
   ] d=: (?. 3 4$2) * ?. 3 4$100
 0 75  0 53
 0  0 67 67
93  0 51 83

   ] s=: $. d                  <font face=Times size=+1>convert</font> d <font face=Times size=+1>to sparse and assign to</font> s
0 1 | 75
0 3 | 53                       <font face=Times size=+1>the display of</font> s <font face=Times size=+1>gives the indices of the</font>
1 2 | 67                       <font face=Times size=+1>"non-zero" cells and the corresponding values</font>
1 3 | 67
2 0 | 93
2 2 | 51
2 3 | 83

   d -: s                      d <font face=Times size=+1>and</font> s <font face=Times size=+1>match</font>
1

   o. s                        <font face=Symbol size=+1>p</font> <font face=Times size=+1>times</font> s
0 1 | 235.619
0 3 | 166.504
1 2 | 210.487
1 3 | 210.487
2 0 | 292.168
2 2 | 160.221
2 3 | 260.752

   o. d                        <font face=Symbol size=+1>p</font> <font face=Times size=+1>times</font> d
      0 235.619       0 166.504
      0       0 210.487 210.487
292.168       0 160.221 260.752

   (o. s) -: o. d              <font face=Times size=+1>function results independent of representation</font>
1

   0.5 + o. s
0 1 | 236.119
0 3 | 167.004
1 2 | 210.987
1 3 | 210.987
2 0 | 292.668
2 2 | 160.721
2 3 | 261.252

   &lt;. 0.5 + o. s
0 1 | 236
0 3 | 167
1 2 | 210
1 3 | 210
2 0 | 292
2 2 | 160
2 3 | 261

   (&lt;. 0.5 + o. s) -: &lt;. 0.5 + o. d
1

   d + s                       <font face=Times size=+1>function arguments can be dense or sparse</font>
0 1 | 150
0 3 | 106
1 2 | 134
1 3 | 134
2 0 | 186
2 2 | 102
2 3 | 166

   (d + s) -: 2*s              <font face=Times size=+1>familiar algebraic properties are preserved</font>
1

   (d + s) -: 2*d
1

   +/ s
0 |  93
1 |  75
2 | 118
3 | 203
   
   +/"1 s
0 | 128
1 | 134
2 | 227

   |. s                        <font face=Times size=+1>reverse</font>
0 0 | 93
0 2 | 51
0 3 | 83
1 2 | 67
1 3 | 67
2 1 | 75
2 3 | 53

   |."1 s
0 0 | 53
0 2 | 75
1 0 | 67
1 1 | 67
2 0 | 83
2 1 | 51
2 3 | 93

   |: s                        <font face=Times size=+1>transpose</font>
0 2 | 93
1 0 | 75
2 1 | 67
2 2 | 51
3 0 | 53
3 1 | 67
3 2 | 83

   $ |: s
4 3

   $.^:_1 |: s                 $.^:_1 <font face=Times size=+1>converts a sparse array to dense</font>
 0  0 93
75  0  0
 0 67 51
53 67 83

   (|:s) -: |:d
1

   , s                         <font face=Times size=+1>ravel; a sparse <i>vector</i></font>
 1 | 75
 3 | 53
 6 | 67
 7 | 67
 8 | 93
10 | 51
11 | 83

   $ , s
12
</pre>

<a name="representation"></a>
<font size=+1><b>Representation</b></font><br><br>

A sparse array<tt> y </tt>may be boolean, integer, floating
point, complex, literal, or boxed, and has the (internal) 
parts<tt> sh;a;e;i;x;flag </tt>where:<br><br>

<table>
<tr><td valign=top><tt>sh</tt></td> 
<td>Shape, <tt>$y</tt> . Elements of
the shape must be less than<tt> 2^31</tt> ,<tt> </tt>but the
product over the shape may be larger than<tt> 2^31</tt> .</td></tr>

<tr><td valign=top><tt>a</tt></td>
<td>Axe(s), a vector of the sorted sparse (indexed) axes.</td></tr>

<tr><td valign=top><tt>e</tt></td>
<td>Sparse element ("zero").<tt> e </tt>is 
also used as the fill in any
overtake of the array. </td></tr>

<tr><td valign=top><tt>i</tt></td>
<td>Indices, an integer matrix of indices for the sparse axes. </td></tr>

<tr><td valign=top><tt>x</tt></td>
<td>Values, a (dense) array of usually non-zero cells for the 
non-sparse axes corresponding to the index matrix<tt> i</tt> .</td></tr>

<tr><td valign=top><tt>flag&nbsp;</tt></td>
<td>Various bit flags. </td></tr>
</table>
<br>

For the sparse matrix<tt> s </tt>used in the introduction,<br>

<pre>
   ] d=: (?. 3 4$2) * ?. 3 4$100
 0 75  0 53
 0  0 67 67
93  0 51 83
    
   ] s=: $. d
0 1 | 75
0 3 | 53
1 2 | 67
1 3 | 67
2 0 | 93
2 2 | 51
2 3 | 83
</pre>

The shape is<tt> 3 4</tt> ;<tt> </tt>
the sparse axes are<tt> 0 1</tt> ;<tt> </tt>
the sparse element is<tt> 0</tt>;<tt> </tt>
the indices are the first two columns of numbers 
in the display of<tt> s</tt> ;<tt> </tt>and the values are 
the last column.<br><br>

Scalars continue to be represented as before (densely). All
primitives accept sparse or dense arrays as arguments 
(e.g.<tt> sparse+dense </tt>or<tt> sparse$sparse</tt>). 
The display of a sparse array is a display of the index matrix 
(the<tt> i </tt>part), a blank column, a column of
vertical lines, another blank column, and 
the corresponding value cells (the<tt> x </tt>part).<br><br>

Letting the sparse element be variable rather than fixed at
zero makes many more functions closed on sparse arrays 
(e.g.<tt> ^y </tt>or<tt> 10+y</tt>),<tt> </tt> 
and familiar results can be produced by familiar phrases 
(e.g.<tt> &lt;.0.5+y </tt>for rounding to the nearest integer).<br><br>

<a name="assertions"></a>
<font size=+1><b>Assertions</b></font><br><br>

The following assertions hold for a sparse array, and
displaying a sparse array invokes these consistency checks on it.<br><br>

<table>
<tr><td><tt>imax =: _1+2^31</tt></td>
<td>the largest internal integer</td></tr>

<tr><td><tt>rank =: #@$</tt></td>
<td>rank</td></tr>

<tr><td><tt>type =: 3!:0</tt></td>
<td>internal type</td></tr>

<tr><td>&nbsp;</td></tr>

<tr><td><tt>1 = rank sh</tt></td>
<td>vector</td></tr>

<tr><td><tt>sh -: &lt;. sh</font></td>
<td>integral</td></tr>

<tr><td><tt>imax &gt;: #sh</font></td>
<td>at most<tt> imax </tt>elements</td></tr>

<tr><td><tt>(0&lt;:sh) *. (sh&lt;:imax)</tt></td>
<td>bounded by<tt> 0 </tt>and<tt> imax</tt></td></tr>

<tr><td>&nbsp;</td></tr>

<tr><td><tt>1 = rank a</tt></td>
<td>vector</td></tr>

<tr><td><tt>a e. i.#sh</font></td>
<td>bounded by<tt> 0 </tt>and rank-1</td></tr>

<tr><td><tt>a -: ~. a</tt></td>
<td>elements are unique</td></tr>

<tr><td><tt>a -: /:~ a</tt></td>
<td>sorted</td></tr>

<tr><td>&nbsp;</td></tr>

<tr><td><tt>0 = rank e</tt></td>
<td>atomic</td></tr>

<tr><td><tt>(type e) = type x</tt></td>
<td>has the same internal type as<tt> x</tt></td></tr>

<tr><td>&nbsp;</td></tr>

<tr><td><tt>2 = rank i</tt></td>
<td>matrix</td></tr>

<tr><td><tt>4 = type i</tt></td>
<td>integral</td></tr>

<tr><td><tt>(#i) = #x</tt></td>
<td>as many rows as the number of items in<tt> x</tt></td></tr>

<tr><td><tt>({:$i) = #a</tt></td>
<td>as many columns as there are sparse axes</td></tr>

<tr><td><tt>(#i) &lt;: */a{sh</tt></td>
<td># rows bounded by product over sparse axes lengths</td></tr>

<tr><td valign=top><tt>imax &gt;: */$i</tt></td>
<td># elements is bounded by<tt> imax</tt></td></tr>

<tr><td valign=top><tt>(0&lt;:i) *. (i &lt;"1 a{sh)</tt></td>
<td><tt>i </tt>bounded by 0 and the lengths of the sparse axes</td></tr>

<tr><td valign=top><tt>i -: ~.i</tt></td>
<td>rows are unique</td></tr>

<tr><td valign=top><tt>i -: /:~ i</tt></td>
<td>rows are sorted</td></tr>

<tr><td>&nbsp;</td></tr>

<tr><td valign=top><tt>(rank x) = 1+(#sh)-#a</tt></td>
<td>rank equals 1 plus the number of dense axes</td></tr>

<tr><td valign=top><tt>imax >: */$x</tt></td>
<td># elements is bounded by<tt> imax</tt></td></tr>

<tr><td valign=top><tt>(}.$x)-:((i.#sh)-.a){s</tt></td>
<td>item shape is the dimensions of the dense axes</td></tr>

<tr><td valign=top><tt>(type x) e. 1 2 4 8 16 32&nbsp;</tt></td>
<td>internal type is boolean, character, integer, real, complex, 
or boxed</td></tr>
</table>
<br>

<a name="further examples"></a>
<font size=+1><b>Further Examples</b></font><br><br>

<pre>
   ] d=: (0=?. 2 3 4$3) * ?. 2 3 4$100
13 0 0 0
21 4 0 0
 0 0 0 0

 3 5 0 0
 0 0 6 0
 0 0 0 0

   ] s=: $. d                  <font face=Times size=+1>convert</font> d <font face=Times size=+1>to sparse and assign to</font> s
0 0 0 | 13
0 1 0 | 21
0 1 1 |  4
1 0 0 |  3
1 0 1 |  5
1 1 2 |  6

   d -: s                      <font face=Times size=+1>match is independent of representation</font>
1

   2 $. s                      <font face=Times size=+1>sparse axes</font>
0 1 2

   3 $. s                      <font face=Times size=+1>sparse element</font>
0

   4 $. s                      <font face=Times size=+1>index matrix; columns correspond to the sparse axes</font>
0 1 0
0 1 1
1 0 0
1 0 1
1 1 2

   5 $. s                      <font face=Times size=+1>corresponding values</font>
13 21 4 3 5 6

   ] u=: (2;2)$.s              <font face=Times size=+1>make</font> 2 <font face=Times size=+1>be the sparse axis</font>
0 | 13 21 0
  |  3  0 0
  |        
1 |  0  4 0
  |  5  0 0
  |        
2 |  0  0 0
  |  0  6 0

   4 $. u                      <font face=Times size=+1>index matrix</font>
0
1
2

   5 $. u                      <font face=Times size=+1>corresponding values</font>
13 21 0
 3  0 0

 0  4 0
 5  0 0

 0  0 0
 0  6 0

   ] t=: (2;0 1)$.s            <font face=Times size=+1>make</font> 0 1 <font face=Times size=+1>be the sparse axes</font>
0 0 | 13 0 0 0
0 1 | 21 4 0 0
1 0 |  3 5 0 0
1 1 |  0 0 6 0

   7 {. t                      <font face=Times size=+1>take</font>
0 0 | 13 0 0 0
0 1 | 21 4 0 0
1 0 |  3 5 0 0
1 1 |  0 0 6 0

   $ 7 {. t
7 3 4

   7{."1 t                     <font face=Times size=+1>take with rank</font>
0 0 | 13 0 0 0 0 0 0
0 1 | 21 4 0 0 0 0 0
1 0 |  3 5 0 0 0 0 0
1 1 |  0 0 6 0 0 0 0

   0 = t
0 0 | 0 1 1 1
0 1 | 0 0 1 1
1 0 | 0 0 1 1
1 1 | 1 1 0 1

   3 $. 0 = t                  <font face=Times size=+1>the sparse element of</font> 0=t <font face=Times size=+1>is</font> 1
1

   +/ , 0 = t
18

   +/ , 0 = d                  <font face=Times size=+1>answers are independent of representation</font>
18

   0 { t                       <font face=Times size=+1>from</font>
0 | 13 0 0 0
1 | 21 4 0 0

   _2 (&lt;1 2 3)}t               <font face=Times size=+1>amend</font>
0 0 | 13 0 0  0
0 1 | 21 4 0  0
1 0 |  3 5 0  0
1 1 |  0 0 6  0
1 2 |  0 0 0 _2

   s=: 1 $. 20 50 1000 75 366
   $ s                         <font face=Times size=+1>20 countries, 50 regions, 1000 salespersons,</font>
20 50 1000 75 366              <font face=Times size=+1>75 products, 366 days in a year</font>

   */ $ s                      <font face=Times size=+1>the product over the shape can be greater than</font> 2^31
2.745e10

   r=: ?. 1e5 $ 1e6            <font face=Times size=+1>revenues</font>
   i=: ?. 1e5 5 $ $ s          <font face=Times size=+1>corresponding locations</font>
   s=: r (&lt;"1 i)} s            <font face=Times size=+1>assign revenues to corresponding locations</font>

   7 {. ": s                   <font face=Times size=+1>the first 7 rows in the display of</font> s
 0  0   5 30 267 | 128133      <font face=Times size=+1>the first row says that for country 0, region 0,</font>
 0  0  26 20 162 | 319804      <font face=Times size=+1>salesperson 5, product 30, day 267,</font> 
 0  0  31 37 211 | 349445      <font face=Times size=+1>the revenue was 128133</font>
 0  0  37 10 351 | 765935
 0  0  56  6  67 | 457449
 0  0  66 54 120 |  38186
 0  0  71 74 246 | 515473

   +/ , s                      <font face=Times size=+1>total revenue</font>
|limit error                   <font face=Times size=+1>the expression failed on</font> ,s <font face=Times size=+1>because it would</font>
| +/    ,s                     <font face=Times size=+1>have required a vector of length 2.745e10</font>

   +/@, s                      <font face=Times size=+1>total revenue</font>
5.00289e10                     f/@, <font face=Times size=+1>is supported by special code</font>

   +/+/+/+/+/ s                <font face=Times size=+1>total revenue</font>
5.00289e10

   +/^:5 s
5.00289e10

   +/^:_ s
5.00289e10

   +/ r
5.00289e10

   +/"1^:4 s                   <font face=Times size=+1>total revenue by country</font>
 0 | 2.48411e9
 1 | 2.55592e9
 2 | 2.55103e9
 3 | 2.52089e9
 4 | 2.49225e9
 5 | 2.45682e9
 6 | 2.52786e9
 7 | 2.45425e9
 8 | 2.48729e9
 9 | 2.50094e9
10 | 2.51109e9
11 | 2.59601e9
12 | 2.49003e9
13 | 2.58199e9
14 | 2.44772e9
15 | 2.47863e9
16 | 2.46455e9
17 |  2.5568e9
18 | 2.43492e9
19 | 2.43582e9

   t=: +/^:2 +/"1^:2 s         <font face=Times size=+1>total revenue by salesperson</font>

   $t
1000

   7{.t
0 | 4.58962e7
1 | 4.81548e7
2 | 3.97248e7
3 | 4.89981e7
4 | 4.85948e7
5 | 4.69227e7
6 | 4.22094e7
</pre>

<a name="sparse linear algebra"></a>
<font size=+1><b>Sparse Linear Algebra</b></font><br><br>

Currently, only sparse matrix multiplication and the solutions
of tri-diagonal linear system are implemented. For example:<br>

<pre>
   f=: }. @ }: @ (,/) @ (,."_1 +/&_1 0 1) @ i.

   f 5                         <font face=Times size=+1>indices for a 5 by 5 tri-diagonal matrix</font>
0 0
0 1
1 0
1 1
1 2
2 1
2 2
2 3
3 2
3 3
3 4
4 3
4 4

   s=: (?. 13$100) (<"1 f 5)} 1 $. 5 5;0 1
   $s
5 5
</pre>

The phrase<tt> 1$.5 5;0 1 </tt>makes
a sparse array with shape<tt> 5 5 </tt>and
sparse axes<tt> 0 1 </tt>
(sparse in both dimensions);<tt> &lt;"1 f 5 </tt>makes boxed indices; 
and<tt> x (&lt;"1 f 5)}y </tt>
amends by<tt> x </tt>the locations in<tt> y </tt>indicated by the indices
(scattered amendment).<br>

<pre>
   s
0 0 | 13
0 1 | 75
1 0 | 45
1 1 | 53
1 2 | 21
2 1 |  4
2 2 | 67
2 3 | 67
3 2 | 93
3 3 | 38
3 4 | 51
4 3 | 83
4 4 |  3

   ] d=: $.^:_1 s              <font face=Times size=+1>the dense representation of</font> s
13 75  0  0  0
45 53 21  0  0
 0  4 67 67  0
 0  0 93 38 51
 0  0  0 83  3

   ] y=: ?. 5$80
10 60 36 42 17

   y %. s
1.27885 _0.0883347 0.339681 0.202906 0.0529263

   y %. d                      <font face=Times size=+1>answers are independent of representation</font>
1.27885 _0.0883347 0.339681 0.202906 0.0529263

   s=: (?. (_2+3*1e5)$1000) (<"1 f 1e5)} 1 $. 1e5 1e5;0 1

   $ s                         s <font face=Times size=+1>is a 1e5 by 1e5 matrix</font>
100000 100000

   y=: ?. 1e5$1000

   ts=: 6!:2 , 7!:2@]          <font face=Times size=+1>time and space for execution</font>

   ts 'y %. s'
0.28 5.2439e6                  <font face=Times size=+1>0.28 seconds; 5.2 megabytes (Pentium 266 Mhz)</font>
</pre>

<a name="implementation status"></a>
<font size=+1><b>Implementation Status</b></font><br><br>

As of 2001-04-21, the following facilities support sparse arrays:<br><br>

<pre>
=       =.      =: 
&lt;       &lt;.      &lt;: 
>       >.      >: 
_       _.      _:

+       +.      +:
*       *.      *:
-       -.      -:
%       %. d    %:

^       ^.
$       $.      $:
~       ~.      ~:
|       |.      |:

        ..      .:
:       :.      ::
,       ,.      ,:
        ;.

#
!       !.      !:
/ m     /. d
\ m     \. m 

[       [.      [:
]       ].
{ d     {.      {:
} d     }.      }:

"       ".       ": m
`                `:
@       @.       @:
&       &.       &:

e. d
i.
i:
j.
o.
r.
_9: to 9:

3!:0 
3!:1
3!:2
3!:3
4!:55
</pre>

<b>Notes:</b>

<ul>
<li>Sparse literal and boxed arrays not yet implemented.
<li>The dyad<tt> %. </tt>only implements the case of triadiagonal
matrices.
<li>Boxed left arguments for<tt> |: </tt>(diagonal slices) not yet
implemented.
<li>The monads<tt> f/ </tt>and<tt> f/"r </tt>are only
implemented for<tt> + * &gt;. &lt;. +. *. = ~: , </tt>(and only
boolean arguments for<tt> = </tt>and<tt> ~:</tt>); on an axis of
length 2, the monads<tt> f/ </tt>and<tt> f/"r </tt>are
implemented for any function.
<li>The monads<tt> f/@, </tt>(and<tt> f/@:, </tt>and<tt> f/&, </tt>and<tt>
f/&:,</tt>)<tt> </tt>are supported by special code.<br>
<li><tt>{ </tt>and<tt> } </tt>only accept the following index
arguments: integer arrays,<tt> &lt;"1</tt> on integer
arrays, and scalar boxed indices (respectively, item indexing,
scattered indexing, and index lists<tt> a0;a1;a2;...</tt>);
and<tt> </tt>(<tt>{ </tt>only) sparse arrays.
</ul>


<br><br>

<!--bottom jump start--><hr><a href="d212.htm">&gt&gt;</a>&nbsp;
<a href="d210.htm">&lt&lt;</a>&nbsp;
<a href="../index/a.htm">Ndx</a>&nbsp;
<a href="../user/contents.htm">Usr</a>&nbsp;
<a href="../primer/contents.htm">Pri</a>&nbsp;
<a href="../phrases/contents.htm">Phr</a>&nbsp;
<a href="../dictionary/contents.htm">Dic</a>&nbsp;
<a href="../release/contents.htm">Rel</a>&nbsp;
<a href="../dictionary/vocabul.htm">Voc</a>&nbsp;
<a href="../dictionary/xmain.htm">!:</a>&nbsp;
<a href="../user/win_driver_cmd_ref_overview.htm">wd</a>&nbsp;
<a href="../index.htm">Help</a>&nbsp;
Dictionary<!--bottom jump end--></body>
</html>
