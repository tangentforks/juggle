<HTML>
<HEAD>
<TITLE>Ch 9: Trains of Verbs</TITLE>

<STYLE TYPE="text/css">
<!--
TT  {font-size: 11pt; COLOR: BLUE}
PRE {font-size: 11pt; COLOR: BLUE}
-->
</STYLE>

</HEAD>

<BODY BGCOLOR=WHITE>

<table border="0" cellpadding="5" cellspacing="0"  width="100%">
 <tr> <td valign="top" width="17%"> <p> </td>
      <td valign="top" width="83%"> 
<H1>Chapter 9: Trains of Verbs</H1>
<p>
In this chapter we continue the topic of trains of verbs begun in Chapter 3.  
Recall that a train is an isolated sequence of functions, written one after the other,  
such as <TT>(+ * -)</TT>.  
<p>
Preparations 
<p>
It will be convenient to have a few definitions ready to hand for the examples to come.    
<PRE>
   x   =: 1 2 3 4  NB. a list of numbers
   sum =: + /      NB. verb: sum of a list
   min =: &lt;. /     NB. verb: smallest item of a list
   max =: >. /     NB. verb: largest item of a list
   
</PRE>
<H2>9.1  Review: Monadic Hooks and Forks</H2>
<p>
Recall from Chapter 3 the monadic hook, with the scheme: 
<PRE>
        (f g) y   means    y f (g y) 
</PRE>
<p>
Here is an example, as a brief reminder: a whole number 
is equal to its floor: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>y =: 2.1 3</TT></TD> 
<TD><TT>&lt;. y</TT></TD> 
<TD><TT>y = &lt;. y</TT></TD> 
<TD><TT>(= &lt;.) y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>2.1 3</TD> 
<TD><PRE>2 3</TD> 
<TD><PRE>0 1</TD> 
<TD><PRE>0 1</TD> 
</PRE></TABLE> 
<p>
Recall also the monadic fork, with the scheme: 
<PRE>
        (f g h) y   means    (f y) g (h y) 
</PRE>
<p>
For example: the mean of a list of numbers is the sum divided by the number-of-items: 
<PRE>
   mean =: sum % #
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>x</TT></TD> 
<TD><TT>sum x</TT></TD> 
<TD><TT># x</TT></TD> 
<TD><TT>(sum x) % (# x)</TT></TD> 
<TD><TT>mean x</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1 2 3 4</TD> 
<TD><PRE>10</TD> 
<TD><PRE>4</TD> 
<TD><PRE>2.5</TD> 
<TD><PRE>2.5</TD> 
</PRE></TABLE> 
<p>
Now we look at some further variations. 
<H2>9.2  Dyadic Hooks</H2>
<p>
3 hours and 15 minutes is 3.25 hours. A verb <TT>hr</TT>, such that <TT>(3 hr 15)</TT> is <TT>3.25</TT>,   
can be written as 
a hook. We want <TT>x hr y</TT> to be <TT>x + (y%60)</TT> and so the hook is: 
<PRE>
   hr =: + (%&60)
   3 hr 15
3.25
   
</PRE>
<p>
The scheme for dyadic hook is: 
<PRE>
    x (f g) y   means   x f (g y) 
</PRE>
<p>
with the diagram: 
<p>
<IMG SRC="diag07.gif" ALT="diagram 07" WIDTH=240 HEIGHT=200> 
<H2>9.3  Dyadic Forks</H2>
<p>
Suppose we say that the expression "10 plus or minus 2" is to mean the list <TT>12 8</TT>. 
A verb to compute <TT>x</TT> plus-or-minus <TT>y</TT> can be written as the fork <TT>(+,-)</TT>: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT> (10+2) , (10-2)</TT></TD> 
<TD><TT> 10 (+,-) 2</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>12 8</TD> 
<TD><PRE>12 8</TD> 
</PRE></TABLE> 
<p>
The scheme for a dyadic fork is: 
<PRE>
      x (f g h) y   means    (x f y) g (x h y) 
</PRE>
<p>
Here is a diagram for this scheme: 
<p>
<IMG SRC="diag09.gif" ALT="diagram 09" WIDTH=240 HEIGHT=200> 
<H2>9.4  Review</H2>
<p>
There are four basic patterns of verb-trains. It may help to fix them in the memory by recalling 
these four verbs: 
<PRE>
   mean         =: sum % #    NB. monadic fork 
   plusminus    =: + , -      NB. dyadic  fork
   wholenumber  =: = &lt;.       NB. monadic hook 
   hr           =: + (%&60)   NB. dyadic  hook
   
</PRE>
<H2>9.5  Longer Trains</H2>
<p>
Now we begin to look at ways in which to broaden the class of  
functions which can be defined as trains. 
<p>
In general a train of any length can be analysed into hooks and forks.   
For a train of 4 verbs, <TT>e f g h</TT>,  the scheme is that 
<PRE>
             e f g h    means   e (f g h) 
</PRE>
<p>
that is, a 4-train <TT>(e f g h)</TT> is a hook, where the first verb is <TT>e</TT> and the second is the  
fork <TT>(f g h)</TT>.   
For example, if <TT>y</TT> a list of numbers:  
<PRE>
   y =: 2 3 4
</PRE>
<p>
then the "norm" of <TT>y</TT> is <TT>(y - mean y)</TT>, where <TT>mean</TT> is defined above as <TT>(sum % #)</TT>.  
We see that the following expressions for the norm of <TT>y</TT> are all equivalent: 
<PRE>
   y - mean y
_1 0 1
   
   (- mean) y       NB. as a hook
_1 0 1
   
   (- (sum % #)) y  NB. by definition of mean
_1 0 1
   
   (- sum % #) y    NB. as 4-train
_1 0 1
   
   
</PRE>
<p>
A certain amount of artistic judgement is called for with long trains. This last 
formulation as the 4-train <TT>(- sum % #)</TT> does not bring out as clearly as it might that  
the key idea is subtracting the mean.  The formulation <TT>( - mean)</TT> is clearer.  
<p>
For a train of 5 verbs <TT>d e f g h</TT> the scheme is: 
<PRE>
        d e f g h   means  d e (f g h) 
</PRE>
<p>
That is, a 5-train <TT>(d e f g h)</TT> is a fork with first verb <TT>d</TT>, second verb <TT>e</TT> and  
third verb the fork <TT>(f g h)</TT> 
For example, if we write a calendar date in the form day month year: 
<PRE>
   date =: 28 2 1999
</PRE>
<p>
and define verbs to extract the day month and year separately: 
<PRE>
   Da =: 0 & {
   Mo =: 1 & {
   Yr =: 2 & {
</PRE>
<p>
the date can be presented in different ways by  5-trains: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>(Da , Mo , Yr) date </TT></TD> 
<TD><TT>(Mo ; Da ; Yr) date</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>28 2 1999</TD> 
<TD><PRE>+-+--+----+ 
|2|28|1999| 
+-+--+----+</TD> 
</PRE></TABLE> 
<p>
The general scheme for a train of verbs <TT>(a b c ...)</TT> depends upon whether 
the number of verbs is even or odd: 
<PRE>
    even:  (a b c ...)    means   hook (a (b c ...))   
 
    odd :  (a b c ...)    means   fork (a b (c ...)) 
</PRE>
<H2>9.6  Identity Functions</H2>
<p>
There is a verb <TT>[</TT> (left bracket) which gives a result identical to its argument.   
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>[ 99</TT></TD> 
<TD><TT>[ 'a b c'</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>99</TD> 
<TD><PRE>a b c</TD> 
</PRE></TABLE> 
<p>
There is a dyadic case, and also a similar verb <TT>]</TT>. Altogether we have these schemes 
<p>
<TT>    [ y   means y</TT> 
<p>
<TT>    x [ y means x</TT> 
<p>
<TT>    ] y   means y</TT> 
<p>
<TT>    x ] y means y</TT> 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>[ 3</TT></TD> 
<TD><TT>2 [ 3</TT></TD> 
<TD><TT>] 3</TT></TD> 
<TD><TT>2 ] 3</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>3</TD> 
<TD><PRE>2</TD> 
<TD><PRE>3</TD> 
<TD><PRE>3</TD> 
</PRE></TABLE> 
<p>
The expression <TT>(+ % ])</TT> is a fork; for arguments <TT>x</TT> and <TT>y</TT> 
it computes 
<p>
<TT>         (x+y) % (x ] y)</TT>  
<p>
that is, <TT>(x+y) % y</TT> 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>2 ] 3</TT></TD> 
<TD><TT>(2 + 3) % (2 ] 3)</TT></TD> 
<TD><TT> 2 (+ % ]) 3</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>3</TD> 
<TD><PRE>1.66667</TD> 
<TD><PRE>1.66667</TD> 
</PRE></TABLE> 
<p>
Another use for the identity function <TT>[</TT> is 
to cause the result of an assignment to be displayed. 
The expression <TT>foo =: 42</TT> is an assignment 
while the expression <TT>[ foo =: 42</TT> 
is not: it merely contains an assignment. 
<PRE>
       foo =: 42       NB.  nothing displayed
       [ foo =: 42
42
</PRE>
<p>
Yet another use for the <TT>[</TT> verb is to allow several assignments to be combined on one 
line.   
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>a =: 3  [  b =: 4  [  c =: 5</TT></TD> 
<TD><TT>a,b,c</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>3</TD> 
<TD><PRE>3 4 5</TD> 
</PRE></TABLE> 
<p>
Since <TT>[</TT> is a verb, its arguments must be nouns, (that is, not functions). Hence the 
assignments combined with <TT>[</TT> must all evaluate to nouns. 
<H3>9.6.1  Example: Hook as Abbreviation</H3>
<p>
The monadic hook <TT>(g h)</TT> is an abbreviation for 
the monadic fork <TT>([ g h)</TT>.  
To demonstrate, suppose we have: 
<PRE>
   g =: ,
   h =: *:
   y =: 3
</PRE>
<p>
Then each of the following expressions is equivalent. 
<PRE>
   ([ g h) y       NB. a fork
3 9
   ([ y) g (h y)   NB. by defn of fork
3 9
   y g (h y)       NB. by defn of [
3 9
   (g h) y         NB. by defn of hook
3 9
   
</PRE>
<H3>9.6.2  Example: Left Hook</H3>
<p>
Recall that the monadic hook has the general scheme 
<p>
  <TT>(f g) y    =   y f (g y)</TT> 
<p>
How can we write, as a train, a function with the scheme   
<p>
  <TT>(  ?   ) y  =   (f y) g y</TT> 
<p>
There are two possibilities. 
One is the fork <TT>(f g ])</TT>:  
<PRE>
   f =: *:
   g =: ,
    
     (f g ]) y        NB. a fork
9 3
     (f y) g (] y)    NB. by meaning of fork  
9 3
     (f y) g y        NB. by meaning of ]
9 3
   
</PRE>
<p>
For another possibility,   
recall the <TT>~</TT> adverb with its scheme 
<TT>(x f~ y) = (y f x)</TT>.  
Our train can be written as 
the hook <TT>(g~ f)</TT>. 
<PRE>
   (g~ f) y      NB. a hook
9 3
   y (g~) (f y)  NB. by meaning of hook
9 3
   (f y) g y     NB. by meaning of ~
9 3
   
</PRE>
<H3>9.6.3  Example: Dyad</H3>
<p>
There is a sense in which <TT>[</TT> and <TT>]</TT> 
can be regarded as standing for left and right arguments. 
<PRE>
   f =: 'f' & ,
   g =: 'g' & ,
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>foo =: (f @: [) , (g @: ])</TT></TD> 
<TD><TT>'a' foo 'b'</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>(f@:[) , (g@:])</TD> 
<TD><PRE>fagb</TD> 
</PRE></TABLE> 
<H2>9.7  The Capped Fork</H2>
<p>
The class of functions which can be written as 
unbroken trains can be widened with the aid of  
the "Cap" verb <TT>[:</TT>  (leftbracket colon) 
<p>
The scheme is: for verbs <TT>f</TT> and <TT>g</TT>,  
the fork <TT>[: f g</TT>  means  <TT>f @: g</TT>. 
For example, let  
<PRE>
   f =: 'f' & ,
   g =: 'g' & ,
   y =: 'y'
   
</PRE>
<p>
then [: is illustrated by: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>f g y</TT></TD> 
<TD><TT>(f @: g) y</TT></TD> 
<TD><TT>([: f g) y</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>fgy</TD> 
<TD><PRE>fgy</TD> 
<TD><PRE>fgy</TD> 
</PRE></TABLE> 
<p>
Notice how the sequence of three verbs  
<TT>([: f g)</TT> looks like a fork, 
but with this "capped fork" it is the MONADIC  
case of the middle verb <TT>f</TT> which is applied.  
<p>
The <TT>[:</TT> verb is  valid ONLY as the left-hand verb of a fork. 
It has no other purpose: as a verb it has an empty 
domain, that is, it cannot be applied to any argument. 
Its usefulness lies in building long trains. 
Suppose for example that: 
<PRE>
   h =: 'h'&,
   
</PRE>
<p>
then the expression <TT>(f , [: g h)</TT> is a 5-train 
which denotes a verb:  
<PRE>
   (f , [: g h) y        NB. a 5-train
fyghy
   
   (f y) , (([: g h) y)  NB. by meaning of 5-train
fyghy
   
   (f y) , (g @: h y)    NB. by meaning of [:
fyghy
   
   (f y) , (g h y)       NB. by meaning of @:
fyghy
   
   'fy'  , 'ghy'         NB. by meaning of f g h 
fyghy
      
</PRE>
<H2>9.8  Constant Functions</H2>
<p>
Here we continue looking at ways of broadening the class of functions that we can 
write as trains of verbs.  
There is a built-in verb <TT>0:</TT> (zero colon) which delivers a value of zero regardless of its argument. There 
is a monadic and a dyadic case: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT> 0: 99</TT></TD> 
<TD><TT>0: 2 3 4</TT></TD> 
<TD><TT>0: 'hello'</TT></TD> 
<TD><TT>88 0: 99</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>0</TD> 
<TD><PRE>0</TD> 
<TD><PRE>0</TD> 
<TD><PRE>0</TD> 
</PRE></TABLE> 
<p>
As well as <TT>0:</TT> there are similar functions <TT>1:</TT> <TT>2:</TT> <TT>3:</TT> and so on up to <TT>9:</TT> and also 
the negative values: <TT>_9:</TT> to <TT>_1:</TT> 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>1: 2 3 4</TT></TD> 
<TD><TT>_3: 'hello'</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>1</TD> 
<TD><PRE>_3</TD> 
</PRE></TABLE> 
<p>
<TT>0:</TT> is said to be a constant function, because its result is constant.  
Constant functions are useful because they can occur in trains at places where 
we want a constant but must write a verb, (because trains of verbs, naturally, contain only 
verbs).  
<p>
For example, a verb to test whether its argument is  
negative (less than zero) can be written as 
<TT>(&lt; & 0)</TT> but alternatively it can be written as a hook: 
<PRE>
   negative =:  &lt; 0:
   
</PRE>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>x =: _1 0 2</TT></TD> 
<TD><TT>0: x</TT></TD> 
<TD><TT>x &lt; (0: x)</TT></TD> 
<TD><TT>negative x</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>_1 0 2</TD> 
<TD><PRE>0</TD> 
<TD><PRE>1 0 0</TD> 
<TD><PRE>1 0 0</TD> 
</PRE></TABLE> 
<H2>9.9  The "Constant" Conjunction</H2>
<p>
The constant functions <TT>_9:</TT> to <TT>9:</TT> offer more choices for ways of defining trains. Neverthless 
they are limited to single-digit scalar constants.  
We look now at at a more general way of writing 
constant functions. 
Suppose that <TT>k</TT> is the constant in question: 
<PRE>
   k =: 'hello'
</PRE>
<p>
An explicit verb written as <TT>(3 : 'k')</TT> will give a constant result of <TT>k</TT>: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>k</TT></TD> 
<TD><TT>(3 : 'k') 1</TT></TD> 
<TD><TT>(3 : 'k') 1 2</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>hello</TD> 
<TD><PRE>hello</TD> 
<TD><PRE>hello</TD> 
</PRE></TABLE> 
<p>
Since <TT>k</TT> is explicit, its rank is infinite: to apply it 
separately to scalars we need to specify a rank <TT>R</TT> of <TT>0</TT>: 
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>k</TT></TD> 
<TD><TT>R =: 0</TT></TD> 
<TD><TT>((3 : 'k') " R) 1 2</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>hello</TD> 
<TD><PRE>0</TD> 
<TD><PRE>hello 
hello</TD> 
</PRE></TABLE> 
<p>
The expression <TT>((3 : 'k') " R)</TT> can  
be abbreviated as <TT>(k " R)</TT> with the aid of the Constant conjunction <TT>"</TT> (double quote) 
<p>
<p>
<TABLE CELLPADDING=10 BORDER=1> 
<TR  VALIGN=TOP> 
<TD><TT>k</TT></TD> 
<TD><TT>R</TT></TD> 
<TD><TT>((3 : 'k') " R) 1 2</TT></TD> 
<TD><TT> 'hello' " R 1 2</TT></TD> 
<TR VALIGN=TOP> 
<TD><PRE>hello</TD> 
<TD><PRE>0</TD> 
<TD><PRE>hello 
hello</TD> 
<TD><PRE>hello 
hello</TD> 
</PRE></TABLE> 
<p>
Note that if <TT>k</TT> is a noun, 
then the verb <TT>(k"R)</TT> means: the constant value <TT>k</TT> 
produced for each rank-R cell of the argument. By contrast, if 
<TT>v</TT> is a verb, then the verb <TT>(v"R)</TT> means: the verb <TT>v</TT> applied 
to each rank-R cell of the argument. 
<p>
The general scheme can be represented as: 
<PRE>
         k " R   means   (3 : 'k') " R 
</PRE>
<p>
This is the end of Chapter 9. 
  </tr> </table>

<HR> 

<p ALIGN=LEFT>
<A HREF="10.htm"> NEXT </A> <BR>
<A HREF="book.htm#toc"> Table of Contents </A>
</p> 

<HR>
<p><FONT SIZE=-2>Copyright &copy; Roger Stokes 1999. 
This material may be freely reproduced,
provided that this copyright notice and provision is also reproduced.
</p>
 
<p ALIGN=CENTER> last updated 10 September 1999</p>
</BODY>
</HTML>
